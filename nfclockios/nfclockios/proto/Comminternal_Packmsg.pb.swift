// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers


internal struct Comminternal { }

internal func == (lhs: Comminternal.PkgMsg, rhs: Comminternal.PkgMsg) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgtype == rhs.hasMsgtype) && (!lhs.hasMsgtype || lhs.msgtype == rhs.msgtype)
  fieldCheck = fieldCheck && (lhs.hasIssuc == rhs.hasIssuc) && (!lhs.hasIssuc || lhs.issuc == rhs.issuc)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasErrdevdesc == rhs.hasErrdevdesc) && (!lhs.hasErrdevdesc || lhs.errdevdesc == rhs.errdevdesc)
  fieldCheck = fieldCheck && (lhs.hasMsgdirection == rhs.hasMsgdirection) && (!lhs.hasMsgdirection || lhs.msgdirection == rhs.msgdirection)
  fieldCheck = fieldCheck && (lhs.hasMsgreplyflag == rhs.hasMsgreplyflag) && (!lhs.hasMsgreplyflag || lhs.msgreplyflag == rhs.msgreplyflag)
  fieldCheck = fieldCheck && (lhs.hasReqmsgtype == rhs.hasReqmsgtype) && (!lhs.hasReqmsgtype || lhs.reqmsgtype == rhs.reqmsgtype)
  fieldCheck = fieldCheck && (lhs.hasReqmsgdata == rhs.hasReqmsgdata) && (!lhs.hasReqmsgdata || lhs.reqmsgdata == rhs.reqmsgdata)
  fieldCheck = fieldCheck && (lhs.hasResmsgtype == rhs.hasResmsgtype) && (!lhs.hasResmsgtype || lhs.resmsgtype == rhs.resmsgtype)
  fieldCheck = fieldCheck && (lhs.hasResmsgdata == rhs.hasResmsgdata) && (!lhs.hasResmsgdata || lhs.resmsgdata == rhs.resmsgdata)
  fieldCheck = fieldCheck && (lhs.hasMsguuid == rhs.hasMsguuid) && (!lhs.hasMsguuid || lhs.msguuid == rhs.msguuid)
  fieldCheck = fieldCheck && (lhs.hasEnmsgstatuscode == rhs.hasEnmsgstatuscode) && (!lhs.hasEnmsgstatuscode || lhs.enmsgstatuscode == rhs.enmsgstatuscode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Comminternal.PkgSessionUser, rhs: Comminternal.PkgSessionUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUseruuid == rhs.hasUseruuid) && (!lhs.hasUseruuid || lhs.useruuid == rhs.useruuid)
  fieldCheck = fieldCheck && (lhs.hasUserlogonname == rhs.hasUserlogonname) && (!lhs.hasUserlogonname || lhs.userlogonname == rhs.userlogonname)
  fieldCheck = fieldCheck && (lhs.hasIslogined == rhs.hasIslogined) && (!lhs.hasIslogined || lhs.islogined == rhs.islogined)
  fieldCheck = fieldCheck && (lhs.hasIsadmin == rhs.hasIsadmin) && (!lhs.hasIsadmin || lhs.isadmin == rhs.isadmin)
  fieldCheck = fieldCheck && (lhs.hasOfflinetime == rhs.hasOfflinetime) && (!lhs.hasOfflinetime || lhs.offlinetime == rhs.offlinetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Comminternal {
  internal struct PackmsgRoot {
    internal static var sharedInstance : PackmsgRoot {
     struct Static {
         static let instance : PackmsgRoot = PackmsgRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class PkgMsg : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnMsgType:Int32 {
        case MsgNone = 0
        case MsgReq = 1
        case MsgRes = 2
        case MsgAll = 3

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnMsgDirection:Int32 {
        case MsgCs = 1
        case MsgSc = 2
        case MsgC2C = 3
        case MsgS2S = 4

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnMsgReplyFlag:Int32 {
        case MsgReplyNormal = 1
        case MsgReplyWithReq = 2
        case MsgReplyNo = 3

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnMsgStatusCode:Int32 {
        case MsgStatusnone = 0
        case MsgConnected = 1
        case MsgClosed = 2

      }

      //Enum type declaration end 

    private(set) var msgtype:Comminternal.PkgMsg.EnMsgType = Comminternal.PkgMsg.EnMsgType.MsgReq
    private(set) var hasMsgtype:Bool = false
    private(set) var hasIssuc:Bool = false
    private(set) var issuc:Bool = false

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasErrdevdesc:Bool = false
    private(set) var errdevdesc:String = ""

    private(set) var msgdirection:Comminternal.PkgMsg.EnMsgDirection = Comminternal.PkgMsg.EnMsgDirection.MsgCs
    private(set) var hasMsgdirection:Bool = false
    private(set) var msgreplyflag:Comminternal.PkgMsg.EnMsgReplyFlag = Comminternal.PkgMsg.EnMsgReplyFlag.MsgReplyNormal
    private(set) var hasMsgreplyflag:Bool = false
    private(set) var hasReqmsgtype:Bool = false
    private(set) var reqmsgtype:String = ""

    private(set) var hasReqmsgdata:Bool = false
    private(set) var reqmsgdata:String = ""

    private(set) var hasResmsgtype:Bool = false
    private(set) var resmsgtype:String = ""

    private(set) var hasResmsgdata:Bool = false
    private(set) var resmsgdata:String = ""

    private(set) var hasMsguuid:Bool = false
    private(set) var msguuid:String = ""

    private(set) var enmsgstatuscode:Comminternal.PkgMsg.EnMsgStatusCode = Comminternal.PkgMsg.EnMsgStatusCode.MsgStatusnone
    private(set) var hasEnmsgstatuscode:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasMsgtype {
        output.writeEnum(1, value:msgtype.rawValue)
      }
      if hasIssuc {
        output.writeBool(2, value:issuc)
      }
      if hasErr {
        output.writeString(3, value:err)
      }
      if hasErrdevdesc {
        output.writeString(4, value:errdevdesc)
      }
      if hasMsgdirection {
        output.writeEnum(5, value:msgdirection.rawValue)
      }
      if hasMsgreplyflag {
        output.writeEnum(6, value:msgreplyflag.rawValue)
      }
      if hasReqmsgtype {
        output.writeString(11, value:reqmsgtype)
      }
      if hasReqmsgdata {
        output.writeString(12, value:reqmsgdata)
      }
      if hasResmsgtype {
        output.writeString(13, value:resmsgtype)
      }
      if hasResmsgdata {
        output.writeString(14, value:resmsgdata)
      }
      if hasMsguuid {
        output.writeString(50, value:msguuid)
      }
      if hasEnmsgstatuscode {
        output.writeEnum(100, value:enmsgstatuscode.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasMsgtype) {
        serialize_size += msgtype.rawValue.computeEnumSize(1)
      }
      if hasIssuc {
        serialize_size += issuc.computeBoolSize(2)
      }
      if hasErr {
        serialize_size += err.computeStringSize(3)
      }
      if hasErrdevdesc {
        serialize_size += errdevdesc.computeStringSize(4)
      }
      if (hasMsgdirection) {
        serialize_size += msgdirection.rawValue.computeEnumSize(5)
      }
      if (hasMsgreplyflag) {
        serialize_size += msgreplyflag.rawValue.computeEnumSize(6)
      }
      if hasReqmsgtype {
        serialize_size += reqmsgtype.computeStringSize(11)
      }
      if hasReqmsgdata {
        serialize_size += reqmsgdata.computeStringSize(12)
      }
      if hasResmsgtype {
        serialize_size += resmsgtype.computeStringSize(13)
      }
      if hasResmsgdata {
        serialize_size += resmsgdata.computeStringSize(14)
      }
      if hasMsguuid {
        serialize_size += msguuid.computeStringSize(50)
      }
      if (hasEnmsgstatuscode) {
        serialize_size += enmsgstatuscode.rawValue.computeEnumSize(100)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comminternal.PkgMsg {
      return Comminternal.PkgMsg.builder().mergeFromData(data, extensionRegistry:Comminternal.PackmsgRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comminternal.PkgMsg {
      return Comminternal.PkgMsg.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comminternal.PkgMsg {
      return Comminternal.PkgMsg.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comminternal.PkgMsg {
      return Comminternal.PkgMsg.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comminternal.PkgMsg {
      return Comminternal.PkgMsg.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comminternal.PkgMsg {
      return Comminternal.PkgMsg.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comminternal.PkgMsgBuilder {
      return Comminternal.PkgMsg.classBuilder() as! Comminternal.PkgMsgBuilder
    }
    internal func builder() -> Comminternal.PkgMsgBuilder {
      return classBuilder() as! Comminternal.PkgMsgBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comminternal.PkgMsgBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comminternal.PkgMsg.builder()
    }
    internal func toBuilder() -> Comminternal.PkgMsgBuilder {
      return Comminternal.PkgMsg.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comminternal.PkgMsg) -> Comminternal.PkgMsgBuilder {
      return Comminternal.PkgMsg.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasMsgtype) {
        output += "\(indent) msgtype: \(msgtype.rawValue)\n"
      }
      if hasIssuc {
        output += "\(indent) issuc: \(issuc) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasErrdevdesc {
        output += "\(indent) errdevdesc: \(errdevdesc) \n"
      }
      if (hasMsgdirection) {
        output += "\(indent) msgdirection: \(msgdirection.rawValue)\n"
      }
      if (hasMsgreplyflag) {
        output += "\(indent) msgreplyflag: \(msgreplyflag.rawValue)\n"
      }
      if hasReqmsgtype {
        output += "\(indent) reqmsgtype: \(reqmsgtype) \n"
      }
      if hasReqmsgdata {
        output += "\(indent) reqmsgdata: \(reqmsgdata) \n"
      }
      if hasResmsgtype {
        output += "\(indent) resmsgtype: \(resmsgtype) \n"
      }
      if hasResmsgdata {
        output += "\(indent) resmsgdata: \(resmsgdata) \n"
      }
      if hasMsguuid {
        output += "\(indent) msguuid: \(msguuid) \n"
      }
      if (hasEnmsgstatuscode) {
        output += "\(indent) enmsgstatuscode: \(enmsgstatuscode.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMsgtype {
               hashCode = (hashCode &* 31) &+ Int(msgtype.rawValue)
            }
            if hasIssuc {
               hashCode = (hashCode &* 31) &+ issuc.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasErrdevdesc {
               hashCode = (hashCode &* 31) &+ errdevdesc.hashValue
            }
            if hasMsgdirection {
               hashCode = (hashCode &* 31) &+ Int(msgdirection.rawValue)
            }
            if hasMsgreplyflag {
               hashCode = (hashCode &* 31) &+ Int(msgreplyflag.rawValue)
            }
            if hasReqmsgtype {
               hashCode = (hashCode &* 31) &+ reqmsgtype.hashValue
            }
            if hasReqmsgdata {
               hashCode = (hashCode &* 31) &+ reqmsgdata.hashValue
            }
            if hasResmsgtype {
               hashCode = (hashCode &* 31) &+ resmsgtype.hashValue
            }
            if hasResmsgdata {
               hashCode = (hashCode &* 31) &+ resmsgdata.hashValue
            }
            if hasMsguuid {
               hashCode = (hashCode &* 31) &+ msguuid.hashValue
            }
            if hasEnmsgstatuscode {
               hashCode = (hashCode &* 31) &+ Int(enmsgstatuscode.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comminternal.PkgMsg"
    }
    override internal func className() -> String {
        return "Comminternal.PkgMsg"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comminternal.PkgMsg.self
    }
    //Meta information declaration end

  }

  final internal class PkgMsgBuilder : GeneratedMessageBuilder {
    private var builderResult:Comminternal.PkgMsg

    required override internal init () {
       builderResult = Comminternal.PkgMsg()
       super.init()
    }
      var hasMsgtype:Bool{
          get {
              return builderResult.hasMsgtype
          }
      }
      var msgtype:Comminternal.PkgMsg.EnMsgType {
          get {
              return builderResult.msgtype
          }
          set (value) {
              builderResult.hasMsgtype = true
              builderResult.msgtype = value
          }
      }
      internal func setMsgtype(value:Comminternal.PkgMsg.EnMsgType)-> Comminternal.PkgMsgBuilder {
        self.msgtype = value
        return self
      }
      internal func clearMsgtype() -> Comminternal.PkgMsgBuilder {
         builderResult.hasMsgtype = false
         builderResult.msgtype = .MsgReq
         return self
      }
    var hasIssuc:Bool {
         get {
              return builderResult.hasIssuc
         }
    }
    var issuc:Bool {
         get {
              return builderResult.issuc
         }
         set (value) {
             builderResult.hasIssuc = true
             builderResult.issuc = value
         }
    }
    func setIssuc(value:Bool)-> Comminternal.PkgMsgBuilder {
      self.issuc = value
      return self
    }
    internal func clearIssuc() -> Comminternal.PkgMsgBuilder{
         builderResult.hasIssuc = false
         builderResult.issuc = false
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> Comminternal.PkgMsgBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> Comminternal.PkgMsgBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasErrdevdesc:Bool {
         get {
              return builderResult.hasErrdevdesc
         }
    }
    var errdevdesc:String {
         get {
              return builderResult.errdevdesc
         }
         set (value) {
             builderResult.hasErrdevdesc = true
             builderResult.errdevdesc = value
         }
    }
    func setErrdevdesc(value:String)-> Comminternal.PkgMsgBuilder {
      self.errdevdesc = value
      return self
    }
    internal func clearErrdevdesc() -> Comminternal.PkgMsgBuilder{
         builderResult.hasErrdevdesc = false
         builderResult.errdevdesc = ""
         return self
    }
      var hasMsgdirection:Bool{
          get {
              return builderResult.hasMsgdirection
          }
      }
      var msgdirection:Comminternal.PkgMsg.EnMsgDirection {
          get {
              return builderResult.msgdirection
          }
          set (value) {
              builderResult.hasMsgdirection = true
              builderResult.msgdirection = value
          }
      }
      internal func setMsgdirection(value:Comminternal.PkgMsg.EnMsgDirection)-> Comminternal.PkgMsgBuilder {
        self.msgdirection = value
        return self
      }
      internal func clearMsgdirection() -> Comminternal.PkgMsgBuilder {
         builderResult.hasMsgdirection = false
         builderResult.msgdirection = .MsgCs
         return self
      }
      var hasMsgreplyflag:Bool{
          get {
              return builderResult.hasMsgreplyflag
          }
      }
      var msgreplyflag:Comminternal.PkgMsg.EnMsgReplyFlag {
          get {
              return builderResult.msgreplyflag
          }
          set (value) {
              builderResult.hasMsgreplyflag = true
              builderResult.msgreplyflag = value
          }
      }
      internal func setMsgreplyflag(value:Comminternal.PkgMsg.EnMsgReplyFlag)-> Comminternal.PkgMsgBuilder {
        self.msgreplyflag = value
        return self
      }
      internal func clearMsgreplyflag() -> Comminternal.PkgMsgBuilder {
         builderResult.hasMsgreplyflag = false
         builderResult.msgreplyflag = .MsgReplyNormal
         return self
      }
    var hasReqmsgtype:Bool {
         get {
              return builderResult.hasReqmsgtype
         }
    }
    var reqmsgtype:String {
         get {
              return builderResult.reqmsgtype
         }
         set (value) {
             builderResult.hasReqmsgtype = true
             builderResult.reqmsgtype = value
         }
    }
    func setReqmsgtype(value:String)-> Comminternal.PkgMsgBuilder {
      self.reqmsgtype = value
      return self
    }
    internal func clearReqmsgtype() -> Comminternal.PkgMsgBuilder{
         builderResult.hasReqmsgtype = false
         builderResult.reqmsgtype = ""
         return self
    }
    var hasReqmsgdata:Bool {
         get {
              return builderResult.hasReqmsgdata
         }
    }
    var reqmsgdata:String {
         get {
              return builderResult.reqmsgdata
         }
         set (value) {
             builderResult.hasReqmsgdata = true
             builderResult.reqmsgdata = value
         }
    }
    func setReqmsgdata(value:String)-> Comminternal.PkgMsgBuilder {
      self.reqmsgdata = value
      return self
    }
    internal func clearReqmsgdata() -> Comminternal.PkgMsgBuilder{
         builderResult.hasReqmsgdata = false
         builderResult.reqmsgdata = ""
         return self
    }
    var hasResmsgtype:Bool {
         get {
              return builderResult.hasResmsgtype
         }
    }
    var resmsgtype:String {
         get {
              return builderResult.resmsgtype
         }
         set (value) {
             builderResult.hasResmsgtype = true
             builderResult.resmsgtype = value
         }
    }
    func setResmsgtype(value:String)-> Comminternal.PkgMsgBuilder {
      self.resmsgtype = value
      return self
    }
    internal func clearResmsgtype() -> Comminternal.PkgMsgBuilder{
         builderResult.hasResmsgtype = false
         builderResult.resmsgtype = ""
         return self
    }
    var hasResmsgdata:Bool {
         get {
              return builderResult.hasResmsgdata
         }
    }
    var resmsgdata:String {
         get {
              return builderResult.resmsgdata
         }
         set (value) {
             builderResult.hasResmsgdata = true
             builderResult.resmsgdata = value
         }
    }
    func setResmsgdata(value:String)-> Comminternal.PkgMsgBuilder {
      self.resmsgdata = value
      return self
    }
    internal func clearResmsgdata() -> Comminternal.PkgMsgBuilder{
         builderResult.hasResmsgdata = false
         builderResult.resmsgdata = ""
         return self
    }
    var hasMsguuid:Bool {
         get {
              return builderResult.hasMsguuid
         }
    }
    var msguuid:String {
         get {
              return builderResult.msguuid
         }
         set (value) {
             builderResult.hasMsguuid = true
             builderResult.msguuid = value
         }
    }
    func setMsguuid(value:String)-> Comminternal.PkgMsgBuilder {
      self.msguuid = value
      return self
    }
    internal func clearMsguuid() -> Comminternal.PkgMsgBuilder{
         builderResult.hasMsguuid = false
         builderResult.msguuid = ""
         return self
    }
      var hasEnmsgstatuscode:Bool{
          get {
              return builderResult.hasEnmsgstatuscode
          }
      }
      var enmsgstatuscode:Comminternal.PkgMsg.EnMsgStatusCode {
          get {
              return builderResult.enmsgstatuscode
          }
          set (value) {
              builderResult.hasEnmsgstatuscode = true
              builderResult.enmsgstatuscode = value
          }
      }
      internal func setEnmsgstatuscode(value:Comminternal.PkgMsg.EnMsgStatusCode)-> Comminternal.PkgMsgBuilder {
        self.enmsgstatuscode = value
        return self
      }
      internal func clearEnmsgstatuscode() -> Comminternal.PkgMsgBuilder {
         builderResult.hasEnmsgstatuscode = false
         builderResult.enmsgstatuscode = .MsgStatusnone
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comminternal.PkgMsgBuilder {
      builderResult = Comminternal.PkgMsg()
      return self
    }
    internal override func clone() -> Comminternal.PkgMsgBuilder {
      return Comminternal.PkgMsg.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comminternal.PkgMsg {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comminternal.PkgMsg {
      var returnMe:Comminternal.PkgMsg = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comminternal.PkgMsg) -> Comminternal.PkgMsgBuilder {
      if (other == Comminternal.PkgMsg()) {
       return self
      }
      if other.hasMsgtype {
           msgtype = other.msgtype
      }
      if other.hasIssuc {
           issuc = other.issuc
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasErrdevdesc {
           errdevdesc = other.errdevdesc
      }
      if other.hasMsgdirection {
           msgdirection = other.msgdirection
      }
      if other.hasMsgreplyflag {
           msgreplyflag = other.msgreplyflag
      }
      if other.hasReqmsgtype {
           reqmsgtype = other.reqmsgtype
      }
      if other.hasReqmsgdata {
           reqmsgdata = other.reqmsgdata
      }
      if other.hasResmsgtype {
           resmsgtype = other.resmsgtype
      }
      if other.hasResmsgdata {
           resmsgdata = other.resmsgdata
      }
      if other.hasMsguuid {
           msguuid = other.msguuid
      }
      if other.hasEnmsgstatuscode {
           enmsgstatuscode = other.enmsgstatuscode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comminternal.PkgMsgBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comminternal.PkgMsgBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntmsgtype = input.readEnum()
          if let enumsmsgtype = Comminternal.PkgMsg.EnMsgType(rawValue:valueIntmsgtype){
               msgtype = enumsmsgtype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntmsgtype))
          }

        case 16 :
          issuc = input.readBool()

        case 26 :
          err = input.readString()

        case 34 :
          errdevdesc = input.readString()

        case 40 :
          let valueIntmsgdirection = input.readEnum()
          if let enumsmsgdirection = Comminternal.PkgMsg.EnMsgDirection(rawValue:valueIntmsgdirection){
               msgdirection = enumsmsgdirection
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntmsgdirection))
          }

        case 48 :
          let valueIntmsgreplyflag = input.readEnum()
          if let enumsmsgreplyflag = Comminternal.PkgMsg.EnMsgReplyFlag(rawValue:valueIntmsgreplyflag){
               msgreplyflag = enumsmsgreplyflag
          } else {
               unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntmsgreplyflag))
          }

        case 90 :
          reqmsgtype = input.readString()

        case 98 :
          reqmsgdata = input.readString()

        case 106 :
          resmsgtype = input.readString()

        case 114 :
          resmsgdata = input.readString()

        case 402 :
          msguuid = input.readString()

        case 800 :
          let valueIntenmsgstatuscode = input.readEnum()
          if let enumsenmsgstatuscode = Comminternal.PkgMsg.EnMsgStatusCode(rawValue:valueIntenmsgstatuscode){
               enmsgstatuscode = enumsenmsgstatuscode
          } else {
               unknownFieldsBuilder.mergeVarintField(100, value:Int64(valueIntenmsgstatuscode))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgSessionUser : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasUseruuid:Bool = false
    private(set) var useruuid:String = ""

    private(set) var hasUserlogonname:Bool = false
    private(set) var userlogonname:String = ""

    private(set) var hasIslogined:Bool = false
    private(set) var islogined:Bool = false

    private(set) var hasIsadmin:Bool = false
    private(set) var isadmin:Bool = false

    private(set) var hasOfflinetime:Bool = false
    private(set) var offlinetime:Int32 = Int32(5)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUseruuid {
        output.writeString(1, value:useruuid)
      }
      if hasUserlogonname {
        output.writeString(2, value:userlogonname)
      }
      if hasIslogined {
        output.writeBool(10, value:islogined)
      }
      if hasIsadmin {
        output.writeBool(11, value:isadmin)
      }
      if hasOfflinetime {
        output.writeInt32(12, value:offlinetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUseruuid {
        serialize_size += useruuid.computeStringSize(1)
      }
      if hasUserlogonname {
        serialize_size += userlogonname.computeStringSize(2)
      }
      if hasIslogined {
        serialize_size += islogined.computeBoolSize(10)
      }
      if hasIsadmin {
        serialize_size += isadmin.computeBoolSize(11)
      }
      if hasOfflinetime {
        serialize_size += offlinetime.computeInt32Size(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Comminternal.PkgSessionUser {
      return Comminternal.PkgSessionUser.builder().mergeFromData(data, extensionRegistry:Comminternal.PackmsgRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Comminternal.PkgSessionUser {
      return Comminternal.PkgSessionUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Comminternal.PkgSessionUser {
      return Comminternal.PkgSessionUser.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Comminternal.PkgSessionUser {
      return Comminternal.PkgSessionUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Comminternal.PkgSessionUser {
      return Comminternal.PkgSessionUser.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comminternal.PkgSessionUser {
      return Comminternal.PkgSessionUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Comminternal.PkgSessionUserBuilder {
      return Comminternal.PkgSessionUser.classBuilder() as! Comminternal.PkgSessionUserBuilder
    }
    internal func builder() -> Comminternal.PkgSessionUserBuilder {
      return classBuilder() as! Comminternal.PkgSessionUserBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Comminternal.PkgSessionUserBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Comminternal.PkgSessionUser.builder()
    }
    internal func toBuilder() -> Comminternal.PkgSessionUserBuilder {
      return Comminternal.PkgSessionUser.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Comminternal.PkgSessionUser) -> Comminternal.PkgSessionUserBuilder {
      return Comminternal.PkgSessionUser.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUseruuid {
        output += "\(indent) useruuid: \(useruuid) \n"
      }
      if hasUserlogonname {
        output += "\(indent) userlogonname: \(userlogonname) \n"
      }
      if hasIslogined {
        output += "\(indent) islogined: \(islogined) \n"
      }
      if hasIsadmin {
        output += "\(indent) isadmin: \(isadmin) \n"
      }
      if hasOfflinetime {
        output += "\(indent) offlinetime: \(offlinetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUseruuid {
               hashCode = (hashCode &* 31) &+ useruuid.hashValue
            }
            if hasUserlogonname {
               hashCode = (hashCode &* 31) &+ userlogonname.hashValue
            }
            if hasIslogined {
               hashCode = (hashCode &* 31) &+ islogined.hashValue
            }
            if hasIsadmin {
               hashCode = (hashCode &* 31) &+ isadmin.hashValue
            }
            if hasOfflinetime {
               hashCode = (hashCode &* 31) &+ offlinetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Comminternal.PkgSessionUser"
    }
    override internal func className() -> String {
        return "Comminternal.PkgSessionUser"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Comminternal.PkgSessionUser.self
    }
    //Meta information declaration end

  }

  final internal class PkgSessionUserBuilder : GeneratedMessageBuilder {
    private var builderResult:Comminternal.PkgSessionUser

    required override internal init () {
       builderResult = Comminternal.PkgSessionUser()
       super.init()
    }
    var hasUseruuid:Bool {
         get {
              return builderResult.hasUseruuid
         }
    }
    var useruuid:String {
         get {
              return builderResult.useruuid
         }
         set (value) {
             builderResult.hasUseruuid = true
             builderResult.useruuid = value
         }
    }
    func setUseruuid(value:String)-> Comminternal.PkgSessionUserBuilder {
      self.useruuid = value
      return self
    }
    internal func clearUseruuid() -> Comminternal.PkgSessionUserBuilder{
         builderResult.hasUseruuid = false
         builderResult.useruuid = ""
         return self
    }
    var hasUserlogonname:Bool {
         get {
              return builderResult.hasUserlogonname
         }
    }
    var userlogonname:String {
         get {
              return builderResult.userlogonname
         }
         set (value) {
             builderResult.hasUserlogonname = true
             builderResult.userlogonname = value
         }
    }
    func setUserlogonname(value:String)-> Comminternal.PkgSessionUserBuilder {
      self.userlogonname = value
      return self
    }
    internal func clearUserlogonname() -> Comminternal.PkgSessionUserBuilder{
         builderResult.hasUserlogonname = false
         builderResult.userlogonname = ""
         return self
    }
    var hasIslogined:Bool {
         get {
              return builderResult.hasIslogined
         }
    }
    var islogined:Bool {
         get {
              return builderResult.islogined
         }
         set (value) {
             builderResult.hasIslogined = true
             builderResult.islogined = value
         }
    }
    func setIslogined(value:Bool)-> Comminternal.PkgSessionUserBuilder {
      self.islogined = value
      return self
    }
    internal func clearIslogined() -> Comminternal.PkgSessionUserBuilder{
         builderResult.hasIslogined = false
         builderResult.islogined = false
         return self
    }
    var hasIsadmin:Bool {
         get {
              return builderResult.hasIsadmin
         }
    }
    var isadmin:Bool {
         get {
              return builderResult.isadmin
         }
         set (value) {
             builderResult.hasIsadmin = true
             builderResult.isadmin = value
         }
    }
    func setIsadmin(value:Bool)-> Comminternal.PkgSessionUserBuilder {
      self.isadmin = value
      return self
    }
    internal func clearIsadmin() -> Comminternal.PkgSessionUserBuilder{
         builderResult.hasIsadmin = false
         builderResult.isadmin = false
         return self
    }
    var hasOfflinetime:Bool {
         get {
              return builderResult.hasOfflinetime
         }
    }
    var offlinetime:Int32 {
         get {
              return builderResult.offlinetime
         }
         set (value) {
             builderResult.hasOfflinetime = true
             builderResult.offlinetime = value
         }
    }
    func setOfflinetime(value:Int32)-> Comminternal.PkgSessionUserBuilder {
      self.offlinetime = value
      return self
    }
    internal func clearOfflinetime() -> Comminternal.PkgSessionUserBuilder{
         builderResult.hasOfflinetime = false
         builderResult.offlinetime = Int32(5)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Comminternal.PkgSessionUserBuilder {
      builderResult = Comminternal.PkgSessionUser()
      return self
    }
    internal override func clone() -> Comminternal.PkgSessionUserBuilder {
      return Comminternal.PkgSessionUser.builderWithPrototype(builderResult)
    }
    internal override func build() -> Comminternal.PkgSessionUser {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Comminternal.PkgSessionUser {
      var returnMe:Comminternal.PkgSessionUser = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Comminternal.PkgSessionUser) -> Comminternal.PkgSessionUserBuilder {
      if (other == Comminternal.PkgSessionUser()) {
       return self
      }
      if other.hasUseruuid {
           useruuid = other.useruuid
      }
      if other.hasUserlogonname {
           userlogonname = other.userlogonname
      }
      if other.hasIslogined {
           islogined = other.islogined
      }
      if other.hasIsadmin {
           isadmin = other.isadmin
      }
      if other.hasOfflinetime {
           offlinetime = other.offlinetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Comminternal.PkgSessionUserBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Comminternal.PkgSessionUserBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          useruuid = input.readString()

        case 18 :
          userlogonname = input.readString()

        case 80 :
          islogined = input.readBool()

        case 88 :
          isadmin = input.readBool()

        case 96 :
          offlinetime = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
