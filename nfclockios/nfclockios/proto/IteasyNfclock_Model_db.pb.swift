// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers


internal extension IteasyNfclock{}

internal func == (lhs: IteasyNfclock.db_lock, rhs: IteasyNfclock.db_lock) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasLockdeviceid == rhs.hasLockdeviceid) && (!lhs.hasLockdeviceid || lhs.lockdeviceid == rhs.lockdeviceid)
  fieldCheck = fieldCheck && (lhs.hasLockname == rhs.hasLockname) && (!lhs.hasLockname || lhs.lockname == rhs.lockname)
  fieldCheck = fieldCheck && (lhs.hasLockposition == rhs.hasLockposition) && (!lhs.hasLockposition || lhs.lockposition == rhs.lockposition)
  fieldCheck = fieldCheck && (lhs.hasLockdesc == rhs.hasLockdesc) && (!lhs.hasLockdesc || lhs.lockdesc == rhs.lockdesc)
  fieldCheck = fieldCheck && (lhs.hasLockpasswd == rhs.hasLockpasswd) && (!lhs.hasLockpasswd || lhs.lockpasswd == rhs.lockpasswd)
  fieldCheck = fieldCheck && (lhs.hasLockopencount == rhs.hasLockopencount) && (!lhs.hasLockopencount || lhs.lockopencount == rhs.lockopencount)
  fieldCheck = fieldCheck && (lhs.hasOwneruseruuid == rhs.hasOwneruseruuid) && (!lhs.hasOwneruseruuid || lhs.owneruseruuid == rhs.owneruseruuid)
  fieldCheck = fieldCheck && (lhs.hasLockofflinetime == rhs.hasLockofflinetime) && (!lhs.hasLockofflinetime || lhs.lockofflinetime == rhs.lockofflinetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.db_lock_open_record, rhs: IteasyNfclock.db_lock_open_record) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOpenrecordid == rhs.hasOpenrecordid) && (!lhs.hasOpenrecordid || lhs.openrecordid == rhs.openrecordid)
  fieldCheck = fieldCheck && (lhs.hasUseruuid == rhs.hasUseruuid) && (!lhs.hasUseruuid || lhs.useruuid == rhs.useruuid)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasOpenaction == rhs.hasOpenaction) && (!lhs.hasOpenaction || lhs.openaction == rhs.openaction)
  fieldCheck = fieldCheck && (lhs.hasOpentime == rhs.hasOpentime) && (!lhs.hasOpentime || lhs.opentime == rhs.opentime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.db_lock_open_permission, rhs: IteasyNfclock.db_lock_open_permission) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPermissionid == rhs.hasPermissionid) && (!lhs.hasPermissionid || lhs.permissionid == rhs.permissionid)
  fieldCheck = fieldCheck && (lhs.hasUseruuid == rhs.hasUseruuid) && (!lhs.hasUseruuid || lhs.useruuid == rhs.useruuid)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasPermissiondesc == rhs.hasPermissiondesc) && (!lhs.hasPermissiondesc || lhs.permissiondesc == rhs.permissiondesc)
  fieldCheck = fieldCheck && (lhs.hasCurtime == rhs.hasCurtime) && (!lhs.hasCurtime || lhs.curtime == rhs.curtime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.db_lock_user_user, rhs: IteasyNfclock.db_lock_user_user) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUuid == rhs.hasUuid) && (!lhs.hasUuid || lhs.uuid == rhs.uuid)
  fieldCheck = fieldCheck && (lhs.hasOwneruseruuid == rhs.hasOwneruseruuid) && (!lhs.hasOwneruseruuid || lhs.owneruseruuid == rhs.owneruseruuid)
  fieldCheck = fieldCheck && (lhs.hasDepartmentname == rhs.hasDepartmentname) && (!lhs.hasDepartmentname || lhs.departmentname == rhs.departmentname)
  fieldCheck = fieldCheck && (lhs.hasTruename == rhs.hasTruename) && (!lhs.hasTruename || lhs.truename == rhs.truename)
  fieldCheck = fieldCheck && (lhs.hasUserphonenumber == rhs.hasUserphonenumber) && (!lhs.hasUserphonenumber || lhs.userphonenumber == rhs.userphonenumber)
  fieldCheck = fieldCheck && (lhs.hasRelateduseruuid == rhs.hasRelateduseruuid) && (!lhs.hasRelateduseruuid || lhs.relateduseruuid == rhs.relateduseruuid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.db_lock_user, rhs: IteasyNfclock.db_lock_user) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUseruuid == rhs.hasUseruuid) && (!lhs.hasUseruuid || lhs.useruuid == rhs.useruuid)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasUserlogonname == rhs.hasUserlogonname) && (!lhs.hasUserlogonname || lhs.userlogonname == rhs.userlogonname)
  fieldCheck = fieldCheck && (lhs.hasUserpassword == rhs.hasUserpassword) && (!lhs.hasUserpassword || lhs.userpassword == rhs.userpassword)
  fieldCheck = fieldCheck && (lhs.hasTruename == rhs.hasTruename) && (!lhs.hasTruename || lhs.truename == rhs.truename)
  fieldCheck = fieldCheck && (lhs.hasIdcardnumber == rhs.hasIdcardnumber) && (!lhs.hasIdcardnumber || lhs.idcardnumber == rhs.idcardnumber)
  fieldCheck = fieldCheck && (lhs.hasRegistertime == rhs.hasRegistertime) && (!lhs.hasRegistertime || lhs.registertime == rhs.registertime)
  fieldCheck = fieldCheck && (lhs.hasOfflinetime == rhs.hasOfflinetime) && (!lhs.hasOfflinetime || lhs.offlinetime == rhs.offlinetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.db_lock_user_auth, rhs: IteasyNfclock.db_lock_user_auth) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAuthid == rhs.hasAuthid) && (!lhs.hasAuthid || lhs.authid == rhs.authid)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasAuthcode == rhs.hasAuthcode) && (!lhs.hasAuthcode || lhs.authcode == rhs.authcode)
  fieldCheck = fieldCheck && (lhs.hasInserttime == rhs.hasInserttime) && (!lhs.hasInserttime || lhs.inserttime == rhs.inserttime)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.hasAuthtype == rhs.hasAuthtype) && (!lhs.hasAuthtype || lhs.authtype == rhs.authtype)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension IteasyNfclock {
  internal struct ModelDbRoot {
    internal static var sharedInstance : ModelDbRoot {
     struct Static {
         static let instance : ModelDbRoot = ModelDbRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class db_lock : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasLockdeviceid:Bool = false
    private(set) var lockdeviceid:String = ""

    private(set) var hasLockname:Bool = false
    private(set) var lockname:String = ""

    private(set) var hasLockposition:Bool = false
    private(set) var lockposition:String = ""

    private(set) var hasLockdesc:Bool = false
    private(set) var lockdesc:String = ""

    private(set) var hasLockpasswd:Bool = false
    private(set) var lockpasswd:String = ""

    private(set) var hasLockopencount:Bool = false
    private(set) var lockopencount:Int32 = Int32(0)

    private(set) var hasOwneruseruuid:Bool = false
    private(set) var owneruseruuid:String = ""

    private(set) var hasLockofflinetime:Bool = false
    private(set) var lockofflinetime:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if hasLockdeviceid {
        output.writeString(2, value:lockdeviceid)
      }
      if hasLockname {
        output.writeString(3, value:lockname)
      }
      if hasLockposition {
        output.writeString(4, value:lockposition)
      }
      if hasLockdesc {
        output.writeString(5, value:lockdesc)
      }
      if hasLockpasswd {
        output.writeString(6, value:lockpasswd)
      }
      if hasLockopencount {
        output.writeInt32(7, value:lockopencount)
      }
      if hasOwneruseruuid {
        output.writeString(8, value:owneruseruuid)
      }
      if hasLockofflinetime {
        output.writeInt32(9, value:lockofflinetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      if hasLockdeviceid {
        serialize_size += lockdeviceid.computeStringSize(2)
      }
      if hasLockname {
        serialize_size += lockname.computeStringSize(3)
      }
      if hasLockposition {
        serialize_size += lockposition.computeStringSize(4)
      }
      if hasLockdesc {
        serialize_size += lockdesc.computeStringSize(5)
      }
      if hasLockpasswd {
        serialize_size += lockpasswd.computeStringSize(6)
      }
      if hasLockopencount {
        serialize_size += lockopencount.computeInt32Size(7)
      }
      if hasOwneruseruuid {
        serialize_size += owneruseruuid.computeStringSize(8)
      }
      if hasLockofflinetime {
        serialize_size += lockofflinetime.computeInt32Size(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.db_lock {
      return IteasyNfclock.db_lock.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelDbRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock {
      return IteasyNfclock.db_lock.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.db_lock {
      return IteasyNfclock.db_lock.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.db_lock {
      return IteasyNfclock.db_lock.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.db_lock {
      return IteasyNfclock.db_lock.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock {
      return IteasyNfclock.db_lock.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.db_lockBuilder {
      return IteasyNfclock.db_lock.classBuilder() as! IteasyNfclock.db_lockBuilder
    }
    internal func builder() -> IteasyNfclock.db_lockBuilder {
      return classBuilder() as! IteasyNfclock.db_lockBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lockBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock.builder()
    }
    internal func toBuilder() -> IteasyNfclock.db_lockBuilder {
      return IteasyNfclock.db_lock.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.db_lock) -> IteasyNfclock.db_lockBuilder {
      return IteasyNfclock.db_lock.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasLockdeviceid {
        output += "\(indent) lockdeviceid: \(lockdeviceid) \n"
      }
      if hasLockname {
        output += "\(indent) lockname: \(lockname) \n"
      }
      if hasLockposition {
        output += "\(indent) lockposition: \(lockposition) \n"
      }
      if hasLockdesc {
        output += "\(indent) lockdesc: \(lockdesc) \n"
      }
      if hasLockpasswd {
        output += "\(indent) lockpasswd: \(lockpasswd) \n"
      }
      if hasLockopencount {
        output += "\(indent) lockopencount: \(lockopencount) \n"
      }
      if hasOwneruseruuid {
        output += "\(indent) owneruseruuid: \(owneruseruuid) \n"
      }
      if hasLockofflinetime {
        output += "\(indent) lockofflinetime: \(lockofflinetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasLockdeviceid {
               hashCode = (hashCode &* 31) &+ lockdeviceid.hashValue
            }
            if hasLockname {
               hashCode = (hashCode &* 31) &+ lockname.hashValue
            }
            if hasLockposition {
               hashCode = (hashCode &* 31) &+ lockposition.hashValue
            }
            if hasLockdesc {
               hashCode = (hashCode &* 31) &+ lockdesc.hashValue
            }
            if hasLockpasswd {
               hashCode = (hashCode &* 31) &+ lockpasswd.hashValue
            }
            if hasLockopencount {
               hashCode = (hashCode &* 31) &+ lockopencount.hashValue
            }
            if hasOwneruseruuid {
               hashCode = (hashCode &* 31) &+ owneruseruuid.hashValue
            }
            if hasLockofflinetime {
               hashCode = (hashCode &* 31) &+ lockofflinetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.db_lock"
    }
    override internal func className() -> String {
        return "IteasyNfclock.db_lock"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.db_lock.self
    }
    //Meta information declaration end

  }

  final internal class db_lockBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.db_lock

    required override internal init () {
       builderResult = IteasyNfclock.db_lock()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.db_lockBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasLockdeviceid:Bool {
         get {
              return builderResult.hasLockdeviceid
         }
    }
    var lockdeviceid:String {
         get {
              return builderResult.lockdeviceid
         }
         set (value) {
             builderResult.hasLockdeviceid = true
             builderResult.lockdeviceid = value
         }
    }
    func setLockdeviceid(value:String)-> IteasyNfclock.db_lockBuilder {
      self.lockdeviceid = value
      return self
    }
    internal func clearLockdeviceid() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockdeviceid = false
         builderResult.lockdeviceid = ""
         return self
    }
    var hasLockname:Bool {
         get {
              return builderResult.hasLockname
         }
    }
    var lockname:String {
         get {
              return builderResult.lockname
         }
         set (value) {
             builderResult.hasLockname = true
             builderResult.lockname = value
         }
    }
    func setLockname(value:String)-> IteasyNfclock.db_lockBuilder {
      self.lockname = value
      return self
    }
    internal func clearLockname() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockname = false
         builderResult.lockname = ""
         return self
    }
    var hasLockposition:Bool {
         get {
              return builderResult.hasLockposition
         }
    }
    var lockposition:String {
         get {
              return builderResult.lockposition
         }
         set (value) {
             builderResult.hasLockposition = true
             builderResult.lockposition = value
         }
    }
    func setLockposition(value:String)-> IteasyNfclock.db_lockBuilder {
      self.lockposition = value
      return self
    }
    internal func clearLockposition() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockposition = false
         builderResult.lockposition = ""
         return self
    }
    var hasLockdesc:Bool {
         get {
              return builderResult.hasLockdesc
         }
    }
    var lockdesc:String {
         get {
              return builderResult.lockdesc
         }
         set (value) {
             builderResult.hasLockdesc = true
             builderResult.lockdesc = value
         }
    }
    func setLockdesc(value:String)-> IteasyNfclock.db_lockBuilder {
      self.lockdesc = value
      return self
    }
    internal func clearLockdesc() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockdesc = false
         builderResult.lockdesc = ""
         return self
    }
    var hasLockpasswd:Bool {
         get {
              return builderResult.hasLockpasswd
         }
    }
    var lockpasswd:String {
         get {
              return builderResult.lockpasswd
         }
         set (value) {
             builderResult.hasLockpasswd = true
             builderResult.lockpasswd = value
         }
    }
    func setLockpasswd(value:String)-> IteasyNfclock.db_lockBuilder {
      self.lockpasswd = value
      return self
    }
    internal func clearLockpasswd() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockpasswd = false
         builderResult.lockpasswd = ""
         return self
    }
    var hasLockopencount:Bool {
         get {
              return builderResult.hasLockopencount
         }
    }
    var lockopencount:Int32 {
         get {
              return builderResult.lockopencount
         }
         set (value) {
             builderResult.hasLockopencount = true
             builderResult.lockopencount = value
         }
    }
    func setLockopencount(value:Int32)-> IteasyNfclock.db_lockBuilder {
      self.lockopencount = value
      return self
    }
    internal func clearLockopencount() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockopencount = false
         builderResult.lockopencount = Int32(0)
         return self
    }
    var hasOwneruseruuid:Bool {
         get {
              return builderResult.hasOwneruseruuid
         }
    }
    var owneruseruuid:String {
         get {
              return builderResult.owneruseruuid
         }
         set (value) {
             builderResult.hasOwneruseruuid = true
             builderResult.owneruseruuid = value
         }
    }
    func setOwneruseruuid(value:String)-> IteasyNfclock.db_lockBuilder {
      self.owneruseruuid = value
      return self
    }
    internal func clearOwneruseruuid() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasOwneruseruuid = false
         builderResult.owneruseruuid = ""
         return self
    }
    var hasLockofflinetime:Bool {
         get {
              return builderResult.hasLockofflinetime
         }
    }
    var lockofflinetime:Int32 {
         get {
              return builderResult.lockofflinetime
         }
         set (value) {
             builderResult.hasLockofflinetime = true
             builderResult.lockofflinetime = value
         }
    }
    func setLockofflinetime(value:Int32)-> IteasyNfclock.db_lockBuilder {
      self.lockofflinetime = value
      return self
    }
    internal func clearLockofflinetime() -> IteasyNfclock.db_lockBuilder{
         builderResult.hasLockofflinetime = false
         builderResult.lockofflinetime = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.db_lockBuilder {
      builderResult = IteasyNfclock.db_lock()
      return self
    }
    internal override func clone() -> IteasyNfclock.db_lockBuilder {
      return IteasyNfclock.db_lock.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.db_lock {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.db_lock {
      var returnMe:IteasyNfclock.db_lock = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.db_lock) -> IteasyNfclock.db_lockBuilder {
      if (other == IteasyNfclock.db_lock()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasLockdeviceid {
           lockdeviceid = other.lockdeviceid
      }
      if other.hasLockname {
           lockname = other.lockname
      }
      if other.hasLockposition {
           lockposition = other.lockposition
      }
      if other.hasLockdesc {
           lockdesc = other.lockdesc
      }
      if other.hasLockpasswd {
           lockpasswd = other.lockpasswd
      }
      if other.hasLockopencount {
           lockopencount = other.lockopencount
      }
      if other.hasOwneruseruuid {
           owneruseruuid = other.owneruseruuid
      }
      if other.hasLockofflinetime {
           lockofflinetime = other.lockofflinetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.db_lockBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lockBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 18 :
          lockdeviceid = input.readString()

        case 26 :
          lockname = input.readString()

        case 34 :
          lockposition = input.readString()

        case 42 :
          lockdesc = input.readString()

        case 50 :
          lockpasswd = input.readString()

        case 56 :
          lockopencount = input.readInt32()

        case 66 :
          owneruseruuid = input.readString()

        case 72 :
          lockofflinetime = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class db_lock_open_record : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasOpenrecordid:Bool = false
    private(set) var openrecordid:String = ""

    private(set) var hasUseruuid:Bool = false
    private(set) var useruuid:String = ""

    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasOpenaction:Bool = false
    private(set) var openaction:String = ""

    private(set) var hasOpentime:Bool = false
    private(set) var opentime:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOpenrecordid {
        output.writeString(1, value:openrecordid)
      }
      if hasUseruuid {
        output.writeString(2, value:useruuid)
      }
      if hasLockuuid {
        output.writeString(3, value:lockuuid)
      }
      if hasOpenaction {
        output.writeString(4, value:openaction)
      }
      if hasOpentime {
        output.writeString(5, value:opentime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOpenrecordid {
        serialize_size += openrecordid.computeStringSize(1)
      }
      if hasUseruuid {
        serialize_size += useruuid.computeStringSize(2)
      }
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(3)
      }
      if hasOpenaction {
        serialize_size += openaction.computeStringSize(4)
      }
      if hasOpentime {
        serialize_size += opentime.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.db_lock_open_record {
      return IteasyNfclock.db_lock_open_record.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelDbRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_open_record {
      return IteasyNfclock.db_lock_open_record.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.db_lock_open_record {
      return IteasyNfclock.db_lock_open_record.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.db_lock_open_record {
      return IteasyNfclock.db_lock_open_record.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.db_lock_open_record {
      return IteasyNfclock.db_lock_open_record.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_open_record {
      return IteasyNfclock.db_lock_open_record.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.db_lock_open_recordBuilder {
      return IteasyNfclock.db_lock_open_record.classBuilder() as! IteasyNfclock.db_lock_open_recordBuilder
    }
    internal func builder() -> IteasyNfclock.db_lock_open_recordBuilder {
      return classBuilder() as! IteasyNfclock.db_lock_open_recordBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_open_recordBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_open_record.builder()
    }
    internal func toBuilder() -> IteasyNfclock.db_lock_open_recordBuilder {
      return IteasyNfclock.db_lock_open_record.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.db_lock_open_record) -> IteasyNfclock.db_lock_open_recordBuilder {
      return IteasyNfclock.db_lock_open_record.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOpenrecordid {
        output += "\(indent) openrecordid: \(openrecordid) \n"
      }
      if hasUseruuid {
        output += "\(indent) useruuid: \(useruuid) \n"
      }
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasOpenaction {
        output += "\(indent) openaction: \(openaction) \n"
      }
      if hasOpentime {
        output += "\(indent) opentime: \(opentime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOpenrecordid {
               hashCode = (hashCode &* 31) &+ openrecordid.hashValue
            }
            if hasUseruuid {
               hashCode = (hashCode &* 31) &+ useruuid.hashValue
            }
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasOpenaction {
               hashCode = (hashCode &* 31) &+ openaction.hashValue
            }
            if hasOpentime {
               hashCode = (hashCode &* 31) &+ opentime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.db_lock_open_record"
    }
    override internal func className() -> String {
        return "IteasyNfclock.db_lock_open_record"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.db_lock_open_record.self
    }
    //Meta information declaration end

  }

  final internal class db_lock_open_recordBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.db_lock_open_record

    required override internal init () {
       builderResult = IteasyNfclock.db_lock_open_record()
       super.init()
    }
    var hasOpenrecordid:Bool {
         get {
              return builderResult.hasOpenrecordid
         }
    }
    var openrecordid:String {
         get {
              return builderResult.openrecordid
         }
         set (value) {
             builderResult.hasOpenrecordid = true
             builderResult.openrecordid = value
         }
    }
    func setOpenrecordid(value:String)-> IteasyNfclock.db_lock_open_recordBuilder {
      self.openrecordid = value
      return self
    }
    internal func clearOpenrecordid() -> IteasyNfclock.db_lock_open_recordBuilder{
         builderResult.hasOpenrecordid = false
         builderResult.openrecordid = ""
         return self
    }
    var hasUseruuid:Bool {
         get {
              return builderResult.hasUseruuid
         }
    }
    var useruuid:String {
         get {
              return builderResult.useruuid
         }
         set (value) {
             builderResult.hasUseruuid = true
             builderResult.useruuid = value
         }
    }
    func setUseruuid(value:String)-> IteasyNfclock.db_lock_open_recordBuilder {
      self.useruuid = value
      return self
    }
    internal func clearUseruuid() -> IteasyNfclock.db_lock_open_recordBuilder{
         builderResult.hasUseruuid = false
         builderResult.useruuid = ""
         return self
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.db_lock_open_recordBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.db_lock_open_recordBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasOpenaction:Bool {
         get {
              return builderResult.hasOpenaction
         }
    }
    var openaction:String {
         get {
              return builderResult.openaction
         }
         set (value) {
             builderResult.hasOpenaction = true
             builderResult.openaction = value
         }
    }
    func setOpenaction(value:String)-> IteasyNfclock.db_lock_open_recordBuilder {
      self.openaction = value
      return self
    }
    internal func clearOpenaction() -> IteasyNfclock.db_lock_open_recordBuilder{
         builderResult.hasOpenaction = false
         builderResult.openaction = ""
         return self
    }
    var hasOpentime:Bool {
         get {
              return builderResult.hasOpentime
         }
    }
    var opentime:String {
         get {
              return builderResult.opentime
         }
         set (value) {
             builderResult.hasOpentime = true
             builderResult.opentime = value
         }
    }
    func setOpentime(value:String)-> IteasyNfclock.db_lock_open_recordBuilder {
      self.opentime = value
      return self
    }
    internal func clearOpentime() -> IteasyNfclock.db_lock_open_recordBuilder{
         builderResult.hasOpentime = false
         builderResult.opentime = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.db_lock_open_recordBuilder {
      builderResult = IteasyNfclock.db_lock_open_record()
      return self
    }
    internal override func clone() -> IteasyNfclock.db_lock_open_recordBuilder {
      return IteasyNfclock.db_lock_open_record.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.db_lock_open_record {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.db_lock_open_record {
      var returnMe:IteasyNfclock.db_lock_open_record = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.db_lock_open_record) -> IteasyNfclock.db_lock_open_recordBuilder {
      if (other == IteasyNfclock.db_lock_open_record()) {
       return self
      }
      if other.hasOpenrecordid {
           openrecordid = other.openrecordid
      }
      if other.hasUseruuid {
           useruuid = other.useruuid
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasOpenaction {
           openaction = other.openaction
      }
      if other.hasOpentime {
           opentime = other.opentime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.db_lock_open_recordBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_open_recordBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          openrecordid = input.readString()

        case 18 :
          useruuid = input.readString()

        case 26 :
          lockuuid = input.readString()

        case 34 :
          openaction = input.readString()

        case 42 :
          opentime = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class db_lock_open_permission : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPermissionid:Bool = false
    private(set) var permissionid:String = ""

    private(set) var hasUseruuid:Bool = false
    private(set) var useruuid:String = ""

    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasPermissiondesc:Bool = false
    private(set) var permissiondesc:String = ""

    private(set) var hasCurtime:Bool = false
    private(set) var curtime:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPermissionid {
        output.writeString(1, value:permissionid)
      }
      if hasUseruuid {
        output.writeString(2, value:useruuid)
      }
      if hasLockuuid {
        output.writeString(3, value:lockuuid)
      }
      if hasPermissiondesc {
        output.writeString(4, value:permissiondesc)
      }
      if hasCurtime {
        output.writeString(5, value:curtime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPermissionid {
        serialize_size += permissionid.computeStringSize(1)
      }
      if hasUseruuid {
        serialize_size += useruuid.computeStringSize(2)
      }
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(3)
      }
      if hasPermissiondesc {
        serialize_size += permissiondesc.computeStringSize(4)
      }
      if hasCurtime {
        serialize_size += curtime.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.db_lock_open_permission {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelDbRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_open_permission {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.db_lock_open_permission {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.db_lock_open_permission {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.db_lock_open_permission {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_open_permission {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.db_lock_open_permissionBuilder {
      return IteasyNfclock.db_lock_open_permission.classBuilder() as! IteasyNfclock.db_lock_open_permissionBuilder
    }
    internal func builder() -> IteasyNfclock.db_lock_open_permissionBuilder {
      return classBuilder() as! IteasyNfclock.db_lock_open_permissionBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_open_permissionBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_open_permission.builder()
    }
    internal func toBuilder() -> IteasyNfclock.db_lock_open_permissionBuilder {
      return IteasyNfclock.db_lock_open_permission.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.db_lock_open_permission) -> IteasyNfclock.db_lock_open_permissionBuilder {
      return IteasyNfclock.db_lock_open_permission.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPermissionid {
        output += "\(indent) permissionid: \(permissionid) \n"
      }
      if hasUseruuid {
        output += "\(indent) useruuid: \(useruuid) \n"
      }
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasPermissiondesc {
        output += "\(indent) permissiondesc: \(permissiondesc) \n"
      }
      if hasCurtime {
        output += "\(indent) curtime: \(curtime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPermissionid {
               hashCode = (hashCode &* 31) &+ permissionid.hashValue
            }
            if hasUseruuid {
               hashCode = (hashCode &* 31) &+ useruuid.hashValue
            }
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasPermissiondesc {
               hashCode = (hashCode &* 31) &+ permissiondesc.hashValue
            }
            if hasCurtime {
               hashCode = (hashCode &* 31) &+ curtime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.db_lock_open_permission"
    }
    override internal func className() -> String {
        return "IteasyNfclock.db_lock_open_permission"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.db_lock_open_permission.self
    }
    //Meta information declaration end

  }

  final internal class db_lock_open_permissionBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.db_lock_open_permission

    required override internal init () {
       builderResult = IteasyNfclock.db_lock_open_permission()
       super.init()
    }
    var hasPermissionid:Bool {
         get {
              return builderResult.hasPermissionid
         }
    }
    var permissionid:String {
         get {
              return builderResult.permissionid
         }
         set (value) {
             builderResult.hasPermissionid = true
             builderResult.permissionid = value
         }
    }
    func setPermissionid(value:String)-> IteasyNfclock.db_lock_open_permissionBuilder {
      self.permissionid = value
      return self
    }
    internal func clearPermissionid() -> IteasyNfclock.db_lock_open_permissionBuilder{
         builderResult.hasPermissionid = false
         builderResult.permissionid = ""
         return self
    }
    var hasUseruuid:Bool {
         get {
              return builderResult.hasUseruuid
         }
    }
    var useruuid:String {
         get {
              return builderResult.useruuid
         }
         set (value) {
             builderResult.hasUseruuid = true
             builderResult.useruuid = value
         }
    }
    func setUseruuid(value:String)-> IteasyNfclock.db_lock_open_permissionBuilder {
      self.useruuid = value
      return self
    }
    internal func clearUseruuid() -> IteasyNfclock.db_lock_open_permissionBuilder{
         builderResult.hasUseruuid = false
         builderResult.useruuid = ""
         return self
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.db_lock_open_permissionBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.db_lock_open_permissionBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasPermissiondesc:Bool {
         get {
              return builderResult.hasPermissiondesc
         }
    }
    var permissiondesc:String {
         get {
              return builderResult.permissiondesc
         }
         set (value) {
             builderResult.hasPermissiondesc = true
             builderResult.permissiondesc = value
         }
    }
    func setPermissiondesc(value:String)-> IteasyNfclock.db_lock_open_permissionBuilder {
      self.permissiondesc = value
      return self
    }
    internal func clearPermissiondesc() -> IteasyNfclock.db_lock_open_permissionBuilder{
         builderResult.hasPermissiondesc = false
         builderResult.permissiondesc = ""
         return self
    }
    var hasCurtime:Bool {
         get {
              return builderResult.hasCurtime
         }
    }
    var curtime:String {
         get {
              return builderResult.curtime
         }
         set (value) {
             builderResult.hasCurtime = true
             builderResult.curtime = value
         }
    }
    func setCurtime(value:String)-> IteasyNfclock.db_lock_open_permissionBuilder {
      self.curtime = value
      return self
    }
    internal func clearCurtime() -> IteasyNfclock.db_lock_open_permissionBuilder{
         builderResult.hasCurtime = false
         builderResult.curtime = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.db_lock_open_permissionBuilder {
      builderResult = IteasyNfclock.db_lock_open_permission()
      return self
    }
    internal override func clone() -> IteasyNfclock.db_lock_open_permissionBuilder {
      return IteasyNfclock.db_lock_open_permission.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.db_lock_open_permission {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.db_lock_open_permission {
      var returnMe:IteasyNfclock.db_lock_open_permission = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.db_lock_open_permission) -> IteasyNfclock.db_lock_open_permissionBuilder {
      if (other == IteasyNfclock.db_lock_open_permission()) {
       return self
      }
      if other.hasPermissionid {
           permissionid = other.permissionid
      }
      if other.hasUseruuid {
           useruuid = other.useruuid
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasPermissiondesc {
           permissiondesc = other.permissiondesc
      }
      if other.hasCurtime {
           curtime = other.curtime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.db_lock_open_permissionBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_open_permissionBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          permissionid = input.readString()

        case 18 :
          useruuid = input.readString()

        case 26 :
          lockuuid = input.readString()

        case 34 :
          permissiondesc = input.readString()

        case 42 :
          curtime = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class db_lock_user_user : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasUuid:Bool = false
    private(set) var uuid:String = ""

    private(set) var hasOwneruseruuid:Bool = false
    private(set) var owneruseruuid:String = ""

    private(set) var hasDepartmentname:Bool = false
    private(set) var departmentname:String = ""

    private(set) var hasTruename:Bool = false
    private(set) var truename:String = ""

    private(set) var hasUserphonenumber:Bool = false
    private(set) var userphonenumber:String = ""

    private(set) var hasRelateduseruuid:Bool = false
    private(set) var relateduseruuid:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUuid {
        output.writeString(1, value:uuid)
      }
      if hasOwneruseruuid {
        output.writeString(2, value:owneruseruuid)
      }
      if hasDepartmentname {
        output.writeString(3, value:departmentname)
      }
      if hasTruename {
        output.writeString(4, value:truename)
      }
      if hasUserphonenumber {
        output.writeString(5, value:userphonenumber)
      }
      if hasRelateduseruuid {
        output.writeString(6, value:relateduseruuid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUuid {
        serialize_size += uuid.computeStringSize(1)
      }
      if hasOwneruseruuid {
        serialize_size += owneruseruuid.computeStringSize(2)
      }
      if hasDepartmentname {
        serialize_size += departmentname.computeStringSize(3)
      }
      if hasTruename {
        serialize_size += truename.computeStringSize(4)
      }
      if hasUserphonenumber {
        serialize_size += userphonenumber.computeStringSize(5)
      }
      if hasRelateduseruuid {
        serialize_size += relateduseruuid.computeStringSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.db_lock_user_user {
      return IteasyNfclock.db_lock_user_user.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelDbRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user_user {
      return IteasyNfclock.db_lock_user_user.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.db_lock_user_user {
      return IteasyNfclock.db_lock_user_user.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.db_lock_user_user {
      return IteasyNfclock.db_lock_user_user.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.db_lock_user_user {
      return IteasyNfclock.db_lock_user_user.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user_user {
      return IteasyNfclock.db_lock_user_user.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.db_lock_user_userBuilder {
      return IteasyNfclock.db_lock_user_user.classBuilder() as! IteasyNfclock.db_lock_user_userBuilder
    }
    internal func builder() -> IteasyNfclock.db_lock_user_userBuilder {
      return classBuilder() as! IteasyNfclock.db_lock_user_userBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_user_userBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_user_user.builder()
    }
    internal func toBuilder() -> IteasyNfclock.db_lock_user_userBuilder {
      return IteasyNfclock.db_lock_user_user.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.db_lock_user_user) -> IteasyNfclock.db_lock_user_userBuilder {
      return IteasyNfclock.db_lock_user_user.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUuid {
        output += "\(indent) uuid: \(uuid) \n"
      }
      if hasOwneruseruuid {
        output += "\(indent) owneruseruuid: \(owneruseruuid) \n"
      }
      if hasDepartmentname {
        output += "\(indent) departmentname: \(departmentname) \n"
      }
      if hasTruename {
        output += "\(indent) truename: \(truename) \n"
      }
      if hasUserphonenumber {
        output += "\(indent) userphonenumber: \(userphonenumber) \n"
      }
      if hasRelateduseruuid {
        output += "\(indent) relateduseruuid: \(relateduseruuid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUuid {
               hashCode = (hashCode &* 31) &+ uuid.hashValue
            }
            if hasOwneruseruuid {
               hashCode = (hashCode &* 31) &+ owneruseruuid.hashValue
            }
            if hasDepartmentname {
               hashCode = (hashCode &* 31) &+ departmentname.hashValue
            }
            if hasTruename {
               hashCode = (hashCode &* 31) &+ truename.hashValue
            }
            if hasUserphonenumber {
               hashCode = (hashCode &* 31) &+ userphonenumber.hashValue
            }
            if hasRelateduseruuid {
               hashCode = (hashCode &* 31) &+ relateduseruuid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.db_lock_user_user"
    }
    override internal func className() -> String {
        return "IteasyNfclock.db_lock_user_user"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.db_lock_user_user.self
    }
    //Meta information declaration end

  }

  final internal class db_lock_user_userBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.db_lock_user_user

    required override internal init () {
       builderResult = IteasyNfclock.db_lock_user_user()
       super.init()
    }
    var hasUuid:Bool {
         get {
              return builderResult.hasUuid
         }
    }
    var uuid:String {
         get {
              return builderResult.uuid
         }
         set (value) {
             builderResult.hasUuid = true
             builderResult.uuid = value
         }
    }
    func setUuid(value:String)-> IteasyNfclock.db_lock_user_userBuilder {
      self.uuid = value
      return self
    }
    internal func clearUuid() -> IteasyNfclock.db_lock_user_userBuilder{
         builderResult.hasUuid = false
         builderResult.uuid = ""
         return self
    }
    var hasOwneruseruuid:Bool {
         get {
              return builderResult.hasOwneruseruuid
         }
    }
    var owneruseruuid:String {
         get {
              return builderResult.owneruseruuid
         }
         set (value) {
             builderResult.hasOwneruseruuid = true
             builderResult.owneruseruuid = value
         }
    }
    func setOwneruseruuid(value:String)-> IteasyNfclock.db_lock_user_userBuilder {
      self.owneruseruuid = value
      return self
    }
    internal func clearOwneruseruuid() -> IteasyNfclock.db_lock_user_userBuilder{
         builderResult.hasOwneruseruuid = false
         builderResult.owneruseruuid = ""
         return self
    }
    var hasDepartmentname:Bool {
         get {
              return builderResult.hasDepartmentname
         }
    }
    var departmentname:String {
         get {
              return builderResult.departmentname
         }
         set (value) {
             builderResult.hasDepartmentname = true
             builderResult.departmentname = value
         }
    }
    func setDepartmentname(value:String)-> IteasyNfclock.db_lock_user_userBuilder {
      self.departmentname = value
      return self
    }
    internal func clearDepartmentname() -> IteasyNfclock.db_lock_user_userBuilder{
         builderResult.hasDepartmentname = false
         builderResult.departmentname = ""
         return self
    }
    var hasTruename:Bool {
         get {
              return builderResult.hasTruename
         }
    }
    var truename:String {
         get {
              return builderResult.truename
         }
         set (value) {
             builderResult.hasTruename = true
             builderResult.truename = value
         }
    }
    func setTruename(value:String)-> IteasyNfclock.db_lock_user_userBuilder {
      self.truename = value
      return self
    }
    internal func clearTruename() -> IteasyNfclock.db_lock_user_userBuilder{
         builderResult.hasTruename = false
         builderResult.truename = ""
         return self
    }
    var hasUserphonenumber:Bool {
         get {
              return builderResult.hasUserphonenumber
         }
    }
    var userphonenumber:String {
         get {
              return builderResult.userphonenumber
         }
         set (value) {
             builderResult.hasUserphonenumber = true
             builderResult.userphonenumber = value
         }
    }
    func setUserphonenumber(value:String)-> IteasyNfclock.db_lock_user_userBuilder {
      self.userphonenumber = value
      return self
    }
    internal func clearUserphonenumber() -> IteasyNfclock.db_lock_user_userBuilder{
         builderResult.hasUserphonenumber = false
         builderResult.userphonenumber = ""
         return self
    }
    var hasRelateduseruuid:Bool {
         get {
              return builderResult.hasRelateduseruuid
         }
    }
    var relateduseruuid:String {
         get {
              return builderResult.relateduseruuid
         }
         set (value) {
             builderResult.hasRelateduseruuid = true
             builderResult.relateduseruuid = value
         }
    }
    func setRelateduseruuid(value:String)-> IteasyNfclock.db_lock_user_userBuilder {
      self.relateduseruuid = value
      return self
    }
    internal func clearRelateduseruuid() -> IteasyNfclock.db_lock_user_userBuilder{
         builderResult.hasRelateduseruuid = false
         builderResult.relateduseruuid = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.db_lock_user_userBuilder {
      builderResult = IteasyNfclock.db_lock_user_user()
      return self
    }
    internal override func clone() -> IteasyNfclock.db_lock_user_userBuilder {
      return IteasyNfclock.db_lock_user_user.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.db_lock_user_user {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.db_lock_user_user {
      var returnMe:IteasyNfclock.db_lock_user_user = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.db_lock_user_user) -> IteasyNfclock.db_lock_user_userBuilder {
      if (other == IteasyNfclock.db_lock_user_user()) {
       return self
      }
      if other.hasUuid {
           uuid = other.uuid
      }
      if other.hasOwneruseruuid {
           owneruseruuid = other.owneruseruuid
      }
      if other.hasDepartmentname {
           departmentname = other.departmentname
      }
      if other.hasTruename {
           truename = other.truename
      }
      if other.hasUserphonenumber {
           userphonenumber = other.userphonenumber
      }
      if other.hasRelateduseruuid {
           relateduseruuid = other.relateduseruuid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.db_lock_user_userBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user_userBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          uuid = input.readString()

        case 18 :
          owneruseruuid = input.readString()

        case 26 :
          departmentname = input.readString()

        case 34 :
          truename = input.readString()

        case 42 :
          userphonenumber = input.readString()

        case 50 :
          relateduseruuid = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class db_lock_user : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasUseruuid:Bool = false
    private(set) var useruuid:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasUserlogonname:Bool = false
    private(set) var userlogonname:String = ""

    private(set) var hasUserpassword:Bool = false
    private(set) var userpassword:String = ""

    private(set) var hasTruename:Bool = false
    private(set) var truename:String = ""

    private(set) var hasIdcardnumber:Bool = false
    private(set) var idcardnumber:String = ""

    private(set) var hasRegistertime:Bool = false
    private(set) var registertime:String = ""

    private(set) var hasOfflinetime:Bool = false
    private(set) var offlinetime:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUseruuid {
        output.writeString(1, value:useruuid)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasUserlogonname {
        output.writeString(4, value:userlogonname)
      }
      if hasUserpassword {
        output.writeString(5, value:userpassword)
      }
      if hasTruename {
        output.writeString(6, value:truename)
      }
      if hasIdcardnumber {
        output.writeString(7, value:idcardnumber)
      }
      if hasRegistertime {
        output.writeString(8, value:registertime)
      }
      if hasOfflinetime {
        output.writeInt32(9, value:offlinetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUseruuid {
        serialize_size += useruuid.computeStringSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasUserlogonname {
        serialize_size += userlogonname.computeStringSize(4)
      }
      if hasUserpassword {
        serialize_size += userpassword.computeStringSize(5)
      }
      if hasTruename {
        serialize_size += truename.computeStringSize(6)
      }
      if hasIdcardnumber {
        serialize_size += idcardnumber.computeStringSize(7)
      }
      if hasRegistertime {
        serialize_size += registertime.computeStringSize(8)
      }
      if hasOfflinetime {
        serialize_size += offlinetime.computeInt32Size(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.db_lock_user {
      return IteasyNfclock.db_lock_user.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelDbRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user {
      return IteasyNfclock.db_lock_user.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.db_lock_user {
      return IteasyNfclock.db_lock_user.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.db_lock_user {
      return IteasyNfclock.db_lock_user.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.db_lock_user {
      return IteasyNfclock.db_lock_user.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user {
      return IteasyNfclock.db_lock_user.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.db_lock_userBuilder {
      return IteasyNfclock.db_lock_user.classBuilder() as! IteasyNfclock.db_lock_userBuilder
    }
    internal func builder() -> IteasyNfclock.db_lock_userBuilder {
      return classBuilder() as! IteasyNfclock.db_lock_userBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_userBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_user.builder()
    }
    internal func toBuilder() -> IteasyNfclock.db_lock_userBuilder {
      return IteasyNfclock.db_lock_user.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.db_lock_user) -> IteasyNfclock.db_lock_userBuilder {
      return IteasyNfclock.db_lock_user.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUseruuid {
        output += "\(indent) useruuid: \(useruuid) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasUserlogonname {
        output += "\(indent) userlogonname: \(userlogonname) \n"
      }
      if hasUserpassword {
        output += "\(indent) userpassword: \(userpassword) \n"
      }
      if hasTruename {
        output += "\(indent) truename: \(truename) \n"
      }
      if hasIdcardnumber {
        output += "\(indent) idcardnumber: \(idcardnumber) \n"
      }
      if hasRegistertime {
        output += "\(indent) registertime: \(registertime) \n"
      }
      if hasOfflinetime {
        output += "\(indent) offlinetime: \(offlinetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUseruuid {
               hashCode = (hashCode &* 31) &+ useruuid.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasUserlogonname {
               hashCode = (hashCode &* 31) &+ userlogonname.hashValue
            }
            if hasUserpassword {
               hashCode = (hashCode &* 31) &+ userpassword.hashValue
            }
            if hasTruename {
               hashCode = (hashCode &* 31) &+ truename.hashValue
            }
            if hasIdcardnumber {
               hashCode = (hashCode &* 31) &+ idcardnumber.hashValue
            }
            if hasRegistertime {
               hashCode = (hashCode &* 31) &+ registertime.hashValue
            }
            if hasOfflinetime {
               hashCode = (hashCode &* 31) &+ offlinetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.db_lock_user"
    }
    override internal func className() -> String {
        return "IteasyNfclock.db_lock_user"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.db_lock_user.self
    }
    //Meta information declaration end

  }

  final internal class db_lock_userBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.db_lock_user

    required override internal init () {
       builderResult = IteasyNfclock.db_lock_user()
       super.init()
    }
    var hasUseruuid:Bool {
         get {
              return builderResult.hasUseruuid
         }
    }
    var useruuid:String {
         get {
              return builderResult.useruuid
         }
         set (value) {
             builderResult.hasUseruuid = true
             builderResult.useruuid = value
         }
    }
    func setUseruuid(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.useruuid = value
      return self
    }
    internal func clearUseruuid() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasUseruuid = false
         builderResult.useruuid = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasUserlogonname:Bool {
         get {
              return builderResult.hasUserlogonname
         }
    }
    var userlogonname:String {
         get {
              return builderResult.userlogonname
         }
         set (value) {
             builderResult.hasUserlogonname = true
             builderResult.userlogonname = value
         }
    }
    func setUserlogonname(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.userlogonname = value
      return self
    }
    internal func clearUserlogonname() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasUserlogonname = false
         builderResult.userlogonname = ""
         return self
    }
    var hasUserpassword:Bool {
         get {
              return builderResult.hasUserpassword
         }
    }
    var userpassword:String {
         get {
              return builderResult.userpassword
         }
         set (value) {
             builderResult.hasUserpassword = true
             builderResult.userpassword = value
         }
    }
    func setUserpassword(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.userpassword = value
      return self
    }
    internal func clearUserpassword() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasUserpassword = false
         builderResult.userpassword = ""
         return self
    }
    var hasTruename:Bool {
         get {
              return builderResult.hasTruename
         }
    }
    var truename:String {
         get {
              return builderResult.truename
         }
         set (value) {
             builderResult.hasTruename = true
             builderResult.truename = value
         }
    }
    func setTruename(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.truename = value
      return self
    }
    internal func clearTruename() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasTruename = false
         builderResult.truename = ""
         return self
    }
    var hasIdcardnumber:Bool {
         get {
              return builderResult.hasIdcardnumber
         }
    }
    var idcardnumber:String {
         get {
              return builderResult.idcardnumber
         }
         set (value) {
             builderResult.hasIdcardnumber = true
             builderResult.idcardnumber = value
         }
    }
    func setIdcardnumber(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.idcardnumber = value
      return self
    }
    internal func clearIdcardnumber() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasIdcardnumber = false
         builderResult.idcardnumber = ""
         return self
    }
    var hasRegistertime:Bool {
         get {
              return builderResult.hasRegistertime
         }
    }
    var registertime:String {
         get {
              return builderResult.registertime
         }
         set (value) {
             builderResult.hasRegistertime = true
             builderResult.registertime = value
         }
    }
    func setRegistertime(value:String)-> IteasyNfclock.db_lock_userBuilder {
      self.registertime = value
      return self
    }
    internal func clearRegistertime() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasRegistertime = false
         builderResult.registertime = ""
         return self
    }
    var hasOfflinetime:Bool {
         get {
              return builderResult.hasOfflinetime
         }
    }
    var offlinetime:Int32 {
         get {
              return builderResult.offlinetime
         }
         set (value) {
             builderResult.hasOfflinetime = true
             builderResult.offlinetime = value
         }
    }
    func setOfflinetime(value:Int32)-> IteasyNfclock.db_lock_userBuilder {
      self.offlinetime = value
      return self
    }
    internal func clearOfflinetime() -> IteasyNfclock.db_lock_userBuilder{
         builderResult.hasOfflinetime = false
         builderResult.offlinetime = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.db_lock_userBuilder {
      builderResult = IteasyNfclock.db_lock_user()
      return self
    }
    internal override func clone() -> IteasyNfclock.db_lock_userBuilder {
      return IteasyNfclock.db_lock_user.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.db_lock_user {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.db_lock_user {
      var returnMe:IteasyNfclock.db_lock_user = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.db_lock_user) -> IteasyNfclock.db_lock_userBuilder {
      if (other == IteasyNfclock.db_lock_user()) {
       return self
      }
      if other.hasUseruuid {
           useruuid = other.useruuid
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasUserlogonname {
           userlogonname = other.userlogonname
      }
      if other.hasUserpassword {
           userpassword = other.userpassword
      }
      if other.hasTruename {
           truename = other.truename
      }
      if other.hasIdcardnumber {
           idcardnumber = other.idcardnumber
      }
      if other.hasRegistertime {
           registertime = other.registertime
      }
      if other.hasOfflinetime {
           offlinetime = other.offlinetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.db_lock_userBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_userBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          useruuid = input.readString()

        case 26 :
          phonenumber = input.readString()

        case 34 :
          userlogonname = input.readString()

        case 42 :
          userpassword = input.readString()

        case 50 :
          truename = input.readString()

        case 58 :
          idcardnumber = input.readString()

        case 66 :
          registertime = input.readString()

        case 72 :
          offlinetime = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class db_lock_user_auth : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasAuthid:Bool = false
    private(set) var authid:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasAuthcode:Bool = false
    private(set) var authcode:String = ""

    private(set) var hasInserttime:Bool = false
    private(set) var inserttime:String = ""

    private(set) var hasStatus:Bool = false
    private(set) var status:Int32 = Int32(0)

    private(set) var hasAuthtype:Bool = false
    private(set) var authtype:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasAuthid {
        output.writeString(1, value:authid)
      }
      if hasPhonenumber {
        output.writeString(2, value:phonenumber)
      }
      if hasAuthcode {
        output.writeString(3, value:authcode)
      }
      if hasInserttime {
        output.writeString(4, value:inserttime)
      }
      if hasStatus {
        output.writeInt32(5, value:status)
      }
      if hasAuthtype {
        output.writeString(6, value:authtype)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAuthid {
        serialize_size += authid.computeStringSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(2)
      }
      if hasAuthcode {
        serialize_size += authcode.computeStringSize(3)
      }
      if hasInserttime {
        serialize_size += inserttime.computeStringSize(4)
      }
      if hasStatus {
        serialize_size += status.computeInt32Size(5)
      }
      if hasAuthtype {
        serialize_size += authtype.computeStringSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.db_lock_user_auth {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelDbRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user_auth {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.db_lock_user_auth {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.db_lock_user_auth {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.db_lock_user_auth {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user_auth {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.db_lock_user_authBuilder {
      return IteasyNfclock.db_lock_user_auth.classBuilder() as! IteasyNfclock.db_lock_user_authBuilder
    }
    internal func builder() -> IteasyNfclock.db_lock_user_authBuilder {
      return classBuilder() as! IteasyNfclock.db_lock_user_authBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_user_authBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.db_lock_user_auth.builder()
    }
    internal func toBuilder() -> IteasyNfclock.db_lock_user_authBuilder {
      return IteasyNfclock.db_lock_user_auth.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.db_lock_user_auth) -> IteasyNfclock.db_lock_user_authBuilder {
      return IteasyNfclock.db_lock_user_auth.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasAuthid {
        output += "\(indent) authid: \(authid) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasAuthcode {
        output += "\(indent) authcode: \(authcode) \n"
      }
      if hasInserttime {
        output += "\(indent) inserttime: \(inserttime) \n"
      }
      if hasStatus {
        output += "\(indent) status: \(status) \n"
      }
      if hasAuthtype {
        output += "\(indent) authtype: \(authtype) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAuthid {
               hashCode = (hashCode &* 31) &+ authid.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasAuthcode {
               hashCode = (hashCode &* 31) &+ authcode.hashValue
            }
            if hasInserttime {
               hashCode = (hashCode &* 31) &+ inserttime.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ status.hashValue
            }
            if hasAuthtype {
               hashCode = (hashCode &* 31) &+ authtype.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.db_lock_user_auth"
    }
    override internal func className() -> String {
        return "IteasyNfclock.db_lock_user_auth"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.db_lock_user_auth.self
    }
    //Meta information declaration end

  }

  final internal class db_lock_user_authBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.db_lock_user_auth

    required override internal init () {
       builderResult = IteasyNfclock.db_lock_user_auth()
       super.init()
    }
    var hasAuthid:Bool {
         get {
              return builderResult.hasAuthid
         }
    }
    var authid:String {
         get {
              return builderResult.authid
         }
         set (value) {
             builderResult.hasAuthid = true
             builderResult.authid = value
         }
    }
    func setAuthid(value:String)-> IteasyNfclock.db_lock_user_authBuilder {
      self.authid = value
      return self
    }
    internal func clearAuthid() -> IteasyNfclock.db_lock_user_authBuilder{
         builderResult.hasAuthid = false
         builderResult.authid = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.db_lock_user_authBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.db_lock_user_authBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasAuthcode:Bool {
         get {
              return builderResult.hasAuthcode
         }
    }
    var authcode:String {
         get {
              return builderResult.authcode
         }
         set (value) {
             builderResult.hasAuthcode = true
             builderResult.authcode = value
         }
    }
    func setAuthcode(value:String)-> IteasyNfclock.db_lock_user_authBuilder {
      self.authcode = value
      return self
    }
    internal func clearAuthcode() -> IteasyNfclock.db_lock_user_authBuilder{
         builderResult.hasAuthcode = false
         builderResult.authcode = ""
         return self
    }
    var hasInserttime:Bool {
         get {
              return builderResult.hasInserttime
         }
    }
    var inserttime:String {
         get {
              return builderResult.inserttime
         }
         set (value) {
             builderResult.hasInserttime = true
             builderResult.inserttime = value
         }
    }
    func setInserttime(value:String)-> IteasyNfclock.db_lock_user_authBuilder {
      self.inserttime = value
      return self
    }
    internal func clearInserttime() -> IteasyNfclock.db_lock_user_authBuilder{
         builderResult.hasInserttime = false
         builderResult.inserttime = ""
         return self
    }
    var hasStatus:Bool {
         get {
              return builderResult.hasStatus
         }
    }
    var status:Int32 {
         get {
              return builderResult.status
         }
         set (value) {
             builderResult.hasStatus = true
             builderResult.status = value
         }
    }
    func setStatus(value:Int32)-> IteasyNfclock.db_lock_user_authBuilder {
      self.status = value
      return self
    }
    internal func clearStatus() -> IteasyNfclock.db_lock_user_authBuilder{
         builderResult.hasStatus = false
         builderResult.status = Int32(0)
         return self
    }
    var hasAuthtype:Bool {
         get {
              return builderResult.hasAuthtype
         }
    }
    var authtype:String {
         get {
              return builderResult.authtype
         }
         set (value) {
             builderResult.hasAuthtype = true
             builderResult.authtype = value
         }
    }
    func setAuthtype(value:String)-> IteasyNfclock.db_lock_user_authBuilder {
      self.authtype = value
      return self
    }
    internal func clearAuthtype() -> IteasyNfclock.db_lock_user_authBuilder{
         builderResult.hasAuthtype = false
         builderResult.authtype = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.db_lock_user_authBuilder {
      builderResult = IteasyNfclock.db_lock_user_auth()
      return self
    }
    internal override func clone() -> IteasyNfclock.db_lock_user_authBuilder {
      return IteasyNfclock.db_lock_user_auth.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.db_lock_user_auth {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.db_lock_user_auth {
      var returnMe:IteasyNfclock.db_lock_user_auth = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.db_lock_user_auth) -> IteasyNfclock.db_lock_user_authBuilder {
      if (other == IteasyNfclock.db_lock_user_auth()) {
       return self
      }
      if other.hasAuthid {
           authid = other.authid
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasAuthcode {
           authcode = other.authcode
      }
      if other.hasInserttime {
           inserttime = other.inserttime
      }
      if other.hasStatus {
           status = other.status
      }
      if other.hasAuthtype {
           authtype = other.authtype
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.db_lock_user_authBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.db_lock_user_authBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          authid = input.readString()

        case 18 :
          phonenumber = input.readString()

        case 26 :
          authcode = input.readString()

        case 34 :
          inserttime = input.readString()

        case 40 :
          status = input.readInt32()

        case 50 :
          authtype = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
