// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers


internal struct IteasyNfclock { }

internal func == (lhs: IteasyNfclock.PkgUserLoginReq, rhs: IteasyNfclock.PkgUserLoginReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLogintype == rhs.hasLogintype) && (!lhs.hasLogintype || lhs.logintype == rhs.logintype)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasUserlogonname == rhs.hasUserlogonname) && (!lhs.hasUserlogonname || lhs.userlogonname == rhs.userlogonname)
  fieldCheck = fieldCheck && (lhs.hasEmailname == rhs.hasEmailname) && (!lhs.hasEmailname || lhs.emailname == rhs.emailname)
  fieldCheck = fieldCheck && (lhs.hasUserpassword == rhs.hasUserpassword) && (!lhs.hasUserpassword || lhs.userpassword == rhs.userpassword)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserLoginReply, rhs: IteasyNfclock.PkgUserLoginReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasUserlogonname == rhs.hasUserlogonname) && (!lhs.hasUserlogonname || lhs.userlogonname == rhs.userlogonname)
  fieldCheck = fieldCheck && (lhs.hasTruename == rhs.hasTruename) && (!lhs.hasTruename || lhs.truename == rhs.truename)
  fieldCheck = fieldCheck && (lhs.hasIdcardnumber == rhs.hasIdcardnumber) && (!lhs.hasIdcardnumber || lhs.idcardnumber == rhs.idcardnumber)
  fieldCheck = fieldCheck && (lhs.hasRegistertime == rhs.hasRegistertime) && (!lhs.hasRegistertime || lhs.registertime == rhs.registertime)
  fieldCheck = fieldCheck && (lhs.hasCursrvtime == rhs.hasCursrvtime) && (!lhs.hasCursrvtime || lhs.cursrvtime == rhs.cursrvtime)
  fieldCheck = fieldCheck && (lhs.hasUseruuid == rhs.hasUseruuid) && (!lhs.hasUseruuid || lhs.useruuid == rhs.useruuid)
  fieldCheck = fieldCheck && (lhs.hasOfflinetime == rhs.hasOfflinetime) && (!lhs.hasOfflinetime || lhs.offlinetime == rhs.offlinetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserGetAuthReq, rhs: IteasyNfclock.PkgUserGetAuthReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasAuthtype == rhs.hasAuthtype) && (!lhs.hasAuthtype || lhs.authtype == rhs.authtype)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserGetAuthReply, rhs: IteasyNfclock.PkgUserGetAuthReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserResetPhonenumberReq, rhs: IteasyNfclock.PkgUserResetPhonenumberReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasAuthcode == rhs.hasAuthcode) && (!lhs.hasAuthcode || lhs.authcode == rhs.authcode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserResetPhonenumberReply, rhs: IteasyNfclock.PkgUserResetPhonenumberReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserAuthSetReq, rhs: IteasyNfclock.PkgUserAuthSetReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasTruename == rhs.hasTruename) && (!lhs.hasTruename || lhs.truename == rhs.truename)
  fieldCheck = fieldCheck && (lhs.hasAuthcode == rhs.hasAuthcode) && (!lhs.hasAuthcode || lhs.authcode == rhs.authcode)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasAuthtype == rhs.hasAuthtype) && (!lhs.hasAuthtype || lhs.authtype == rhs.authtype)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserAuthSetReply, rhs: IteasyNfclock.PkgUserAuthSetReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockAddOpenrecordReq, rhs: IteasyNfclock.PkgLockAddOpenrecordReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRecord == rhs.hasRecord) && (!lhs.hasRecord || lhs.record == rhs.record)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockAddOpenrecordReply, rhs: IteasyNfclock.PkgLockAddOpenrecordReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockAddUsersReq, rhs: IteasyNfclock.PkgLockAddUsersReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.useruuidlist == rhs.useruuidlist)
  fieldCheck = fieldCheck && (lhs.hasPermissiondesc == rhs.hasPermissiondesc) && (!lhs.hasPermissiondesc || lhs.permissiondesc == rhs.permissiondesc)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockAddUsersReply, rhs: IteasyNfclock.PkgLockAddUsersReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockDeleteUsersReq, rhs: IteasyNfclock.PkgLockDeleteUsersReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.useruuidlist == rhs.useruuidlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockDeleteUsersReply, rhs: IteasyNfclock.PkgLockDeleteUsersReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserAddReq, rhs: IteasyNfclock.PkgUserAddReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserAddReply, rhs: IteasyNfclock.PkgUserAddReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserDelReq, rhs: IteasyNfclock.PkgUserDelReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.uuidlist == rhs.uuidlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserDelReply, rhs: IteasyNfclock.PkgUserDelReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockAddReq, rhs: IteasyNfclock.PkgLockAddReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLock == rhs.hasLock) && (!lhs.hasLock || lhs.lock == rhs.lock)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockAddReply, rhs: IteasyNfclock.PkgLockAddReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockLogOffReq, rhs: IteasyNfclock.PkgLockLogOffReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockLogOffReply, rhs: IteasyNfclock.PkgLockLogOffReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUpdateLockPasswordReq, rhs: IteasyNfclock.PkgUpdateLockPasswordReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasOldpassword == rhs.hasOldpassword) && (!lhs.hasOldpassword || lhs.oldpassword == rhs.oldpassword)
  fieldCheck = fieldCheck && (lhs.hasNewpassword == rhs.hasNewpassword) && (!lhs.hasNewpassword || lhs.newpassword == rhs.newpassword)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUpdateLockPasswordReply, rhs: IteasyNfclock.PkgUpdateLockPasswordReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgNameIDCardRegisterReq, rhs: IteasyNfclock.PkgNameIDCardRegisterReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTruename == rhs.hasTruename) && (!lhs.hasTruename || lhs.truename == rhs.truename)
  fieldCheck = fieldCheck && (lhs.hasIdcardnumber == rhs.hasIdcardnumber) && (!lhs.hasIdcardnumber || lhs.idcardnumber == rhs.idcardnumber)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgNameIDCardRegisterReply, rhs: IteasyNfclock.PkgNameIDCardRegisterReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserUserActionReq, rhs: IteasyNfclock.PkgUserUserActionReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUseruseruuid == rhs.hasUseruseruuid) && (!lhs.hasUseruseruuid || lhs.useruseruuid == rhs.useruseruuid)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasUseruseractiontype == rhs.hasUseruseractiontype) && (!lhs.hasUseruseractiontype || lhs.useruseractiontype == rhs.useruseractiontype)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserUserActionReply, rhs: IteasyNfclock.PkgUserUserActionReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockGetLockInfoReq, rhs: IteasyNfclock.PkgLockGetLockInfoReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasRecentcount == rhs.hasRecentcount) && (!lhs.hasRecentcount || lhs.recentcount == rhs.recentcount)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockGetLockInfoReply, rhs: IteasyNfclock.PkgLockGetLockInfoReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasUserusercount == rhs.hasUserusercount) && (!lhs.hasUserusercount || lhs.userusercount == rhs.userusercount)
  fieldCheck = fieldCheck && (lhs.hasOpenrecordcount == rhs.hasOpenrecordcount) && (!lhs.hasOpenrecordcount || lhs.openrecordcount == rhs.openrecordcount)
  fieldCheck = fieldCheck && (lhs.lockopenrecordlist == rhs.lockopenrecordlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockGetLockUserReq, rhs: IteasyNfclock.PkgLockGetLockUserReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockGetLockUserReply, rhs: IteasyNfclock.PkgLockGetLockUserReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.useruserlist == rhs.useruserlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockGetLockOpenrecordReq, rhs: IteasyNfclock.PkgLockGetLockOpenrecordReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasQueryflag == rhs.hasQueryflag) && (!lhs.hasQueryflag || lhs.queryflag == rhs.queryflag)
  fieldCheck = fieldCheck && (lhs.hasQuerydatestart == rhs.hasQuerydatestart) && (!lhs.hasQuerydatestart || lhs.querydatestart == rhs.querydatestart)
  fieldCheck = fieldCheck && (lhs.hasQuerydateend == rhs.hasQuerydateend) && (!lhs.hasQuerydateend || lhs.querydateend == rhs.querydateend)
  fieldCheck = fieldCheck && (lhs.hasPageflag == rhs.hasPageflag) && (!lhs.hasPageflag || lhs.pageflag == rhs.pageflag)
  fieldCheck = fieldCheck && (lhs.hasIndexstart == rhs.hasIndexstart) && (!lhs.hasIndexstart || lhs.indexstart == rhs.indexstart)
  fieldCheck = fieldCheck && (lhs.hasIndexend == rhs.hasIndexend) && (!lhs.hasIndexend || lhs.indexend == rhs.indexend)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockGetLockOpenrecordReply, rhs: IteasyNfclock.PkgLockGetLockOpenrecordReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.lockopenrecordlist == rhs.lockopenrecordlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockSetOfflineTimeReq, rhs: IteasyNfclock.PkgLockSetOfflineTimeReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasOfflinetime == rhs.hasOfflinetime) && (!lhs.hasOfflinetime || lhs.offlinetime == rhs.offlinetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockSetOfflineTimeReply, rhs: IteasyNfclock.PkgLockSetOfflineTimeReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserModifyPasswordReq, rhs: IteasyNfclock.PkgUserModifyPasswordReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUseroldpassword == rhs.hasUseroldpassword) && (!lhs.hasUseroldpassword || lhs.useroldpassword == rhs.useroldpassword)
  fieldCheck = fieldCheck && (lhs.hasUsernewpassword == rhs.hasUsernewpassword) && (!lhs.hasUsernewpassword || lhs.usernewpassword == rhs.usernewpassword)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserModifyPasswordReply, rhs: IteasyNfclock.PkgUserModifyPasswordReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserSetOfflineTimeReq, rhs: IteasyNfclock.PkgUserSetOfflineTimeReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOfflinetime == rhs.hasOfflinetime) && (!lhs.hasOfflinetime || lhs.offlinetime == rhs.offlinetime)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserSetOfflineTimeReply, rhs: IteasyNfclock.PkgUserSetOfflineTimeReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLogoutReq, rhs: IteasyNfclock.PkgLogoutReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPhoneversion == rhs.hasPhoneversion) && (!lhs.hasPhoneversion || lhs.phoneversion == rhs.phoneversion)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLogoutReply, rhs: IteasyNfclock.PkgLogoutReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockPassword, rhs: IteasyNfclock.PkgLockPassword) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
  fieldCheck = fieldCheck && (lhs.hasLockpassword == rhs.hasLockpassword) && (!lhs.hasLockpassword || lhs.lockpassword == rhs.lockpassword)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgSrvPushUserInfo, rhs: IteasyNfclock.PkgSrvPushUserInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasTruename == rhs.hasTruename) && (!lhs.hasTruename || lhs.truename == rhs.truename)
  fieldCheck = fieldCheck && (lhs.hasIdcardnumber == rhs.hasIdcardnumber) && (!lhs.hasIdcardnumber || lhs.idcardnumber == rhs.idcardnumber)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgLockPasswordList, rhs: IteasyNfclock.PkgLockPasswordList) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLockuuid == rhs.hasLockuuid) && (!lhs.hasLockuuid || lhs.lockuuid == rhs.lockuuid)
  fieldCheck = fieldCheck && (lhs.hasLockdeviceid == rhs.hasLockdeviceid) && (!lhs.hasLockdeviceid || lhs.lockdeviceid == rhs.lockdeviceid)
  fieldCheck = fieldCheck && (lhs.lockpasswordlist == rhs.lockpasswordlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgSrvPushLockListPasswordList, rhs: IteasyNfclock.PkgSrvPushLockListPasswordList) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.locklistpasswordlist == rhs.locklistpasswordlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgSrvPushLocks, rhs: IteasyNfclock.PkgSrvPushLocks) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.ownerlocklist == rhs.ownerlocklist)
  fieldCheck = fieldCheck && (lhs.otherlocklist == rhs.otherlocklist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgUserUsers, rhs: IteasyNfclock.PkgUserUsers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDbLockUserUser == rhs.hasDbLockUserUser) && (!lhs.hasDbLockUserUser || lhs.dbLockUserUser == rhs.dbLockUserUser)
  fieldCheck = fieldCheck && (lhs.hasUserusertype == rhs.hasUserusertype) && (!lhs.hasUserusertype || lhs.userusertype == rhs.userusertype)
  fieldCheck = fieldCheck && (lhs.hasInfotxt == rhs.hasInfotxt) && (!lhs.hasInfotxt || lhs.infotxt == rhs.infotxt)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IteasyNfclock.PkgSrvPushUserUsers, rhs: IteasyNfclock.PkgSrvPushUserUsers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.userlist == rhs.userlist)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension IteasyNfclock {
  internal struct ModelCommRoot {
    internal static var sharedInstance : ModelCommRoot {
     struct Static {
         static let instance : ModelCommRoot = ModelCommRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      IteasyNfclock.ModelDbRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  internal enum EnLoginType:Int32 {
    case LoginTypePhonenumber = 0
    case LoginTypeUserlogonname = 1
    case LoginTypeEmailname = 2

  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum EnAuthType:Int32 {
    case AuthTypeRegister = 0
    case AuthTypeFindPassword = 1
    case AuthTypeResetPhonenumber = 2

  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum EnUserUserActionType:Int32 {
    case UserUserActionTypeInvite = 0
    case UserUserActionTypeAdd = 1

  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum EnUserUserType:Int32 {
    case UserUserTypeEmpty = 0
    case UserUserTypeRegister = 1
    case UserUserTypeAdded = 2

  }

  //Enum type declaration end 

  final internal class PkgUserLoginReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var logintype:IteasyNfclock.EnLoginType = IteasyNfclock.EnLoginType.LoginTypePhonenumber
    private(set) var hasLogintype:Bool = false
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasUserlogonname:Bool = false
    private(set) var userlogonname:String = ""

    private(set) var hasEmailname:Bool = false
    private(set) var emailname:String = ""

    private(set) var hasUserpassword:Bool = false
    private(set) var userpassword:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasLogintype {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLogintype {
        output.writeEnum(1, value:logintype.rawValue)
      }
      if hasPhonenumber {
        output.writeString(2, value:phonenumber)
      }
      if hasUserlogonname {
        output.writeString(3, value:userlogonname)
      }
      if hasEmailname {
        output.writeString(4, value:emailname)
      }
      if hasUserpassword {
        output.writeString(11, value:userpassword)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasLogintype) {
        serialize_size += logintype.rawValue.computeEnumSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(2)
      }
      if hasUserlogonname {
        serialize_size += userlogonname.computeStringSize(3)
      }
      if hasEmailname {
        serialize_size += emailname.computeStringSize(4)
      }
      if hasUserpassword {
        serialize_size += userpassword.computeStringSize(11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserLoginReq {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserLoginReq {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserLoginReq {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserLoginReq {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserLoginReq {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserLoginReq {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserLoginReqBuilder {
      return IteasyNfclock.PkgUserLoginReq.classBuilder() as! IteasyNfclock.PkgUserLoginReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserLoginReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserLoginReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserLoginReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserLoginReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserLoginReqBuilder {
      return IteasyNfclock.PkgUserLoginReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserLoginReq) -> IteasyNfclock.PkgUserLoginReqBuilder {
      return IteasyNfclock.PkgUserLoginReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasLogintype) {
        output += "\(indent) logintype: \(logintype.rawValue)\n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasUserlogonname {
        output += "\(indent) userlogonname: \(userlogonname) \n"
      }
      if hasEmailname {
        output += "\(indent) emailname: \(emailname) \n"
      }
      if hasUserpassword {
        output += "\(indent) userpassword: \(userpassword) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLogintype {
               hashCode = (hashCode &* 31) &+ Int(logintype.rawValue)
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasUserlogonname {
               hashCode = (hashCode &* 31) &+ userlogonname.hashValue
            }
            if hasEmailname {
               hashCode = (hashCode &* 31) &+ emailname.hashValue
            }
            if hasUserpassword {
               hashCode = (hashCode &* 31) &+ userpassword.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserLoginReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserLoginReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserLoginReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserLoginReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserLoginReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserLoginReq()
       super.init()
    }
      var hasLogintype:Bool{
          get {
              return builderResult.hasLogintype
          }
      }
      var logintype:IteasyNfclock.EnLoginType {
          get {
              return builderResult.logintype
          }
          set (value) {
              builderResult.hasLogintype = true
              builderResult.logintype = value
          }
      }
      internal func setLogintype(value:IteasyNfclock.EnLoginType)-> IteasyNfclock.PkgUserLoginReqBuilder {
        self.logintype = value
        return self
      }
      internal func clearLogintype() -> IteasyNfclock.PkgUserLoginReqBuilder {
         builderResult.hasLogintype = false
         builderResult.logintype = .LoginTypePhonenumber
         return self
      }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgUserLoginReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgUserLoginReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasUserlogonname:Bool {
         get {
              return builderResult.hasUserlogonname
         }
    }
    var userlogonname:String {
         get {
              return builderResult.userlogonname
         }
         set (value) {
             builderResult.hasUserlogonname = true
             builderResult.userlogonname = value
         }
    }
    func setUserlogonname(value:String)-> IteasyNfclock.PkgUserLoginReqBuilder {
      self.userlogonname = value
      return self
    }
    internal func clearUserlogonname() -> IteasyNfclock.PkgUserLoginReqBuilder{
         builderResult.hasUserlogonname = false
         builderResult.userlogonname = ""
         return self
    }
    var hasEmailname:Bool {
         get {
              return builderResult.hasEmailname
         }
    }
    var emailname:String {
         get {
              return builderResult.emailname
         }
         set (value) {
             builderResult.hasEmailname = true
             builderResult.emailname = value
         }
    }
    func setEmailname(value:String)-> IteasyNfclock.PkgUserLoginReqBuilder {
      self.emailname = value
      return self
    }
    internal func clearEmailname() -> IteasyNfclock.PkgUserLoginReqBuilder{
         builderResult.hasEmailname = false
         builderResult.emailname = ""
         return self
    }
    var hasUserpassword:Bool {
         get {
              return builderResult.hasUserpassword
         }
    }
    var userpassword:String {
         get {
              return builderResult.userpassword
         }
         set (value) {
             builderResult.hasUserpassword = true
             builderResult.userpassword = value
         }
    }
    func setUserpassword(value:String)-> IteasyNfclock.PkgUserLoginReqBuilder {
      self.userpassword = value
      return self
    }
    internal func clearUserpassword() -> IteasyNfclock.PkgUserLoginReqBuilder{
         builderResult.hasUserpassword = false
         builderResult.userpassword = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserLoginReqBuilder {
      builderResult = IteasyNfclock.PkgUserLoginReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserLoginReqBuilder {
      return IteasyNfclock.PkgUserLoginReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserLoginReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserLoginReq {
      var returnMe:IteasyNfclock.PkgUserLoginReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserLoginReq) -> IteasyNfclock.PkgUserLoginReqBuilder {
      if (other == IteasyNfclock.PkgUserLoginReq()) {
       return self
      }
      if other.hasLogintype {
           logintype = other.logintype
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasUserlogonname {
           userlogonname = other.userlogonname
      }
      if other.hasEmailname {
           emailname = other.emailname
      }
      if other.hasUserpassword {
           userpassword = other.userpassword
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserLoginReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserLoginReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntlogintype = input.readEnum()
          if let enumslogintype = IteasyNfclock.EnLoginType(rawValue:valueIntlogintype){
               logintype = enumslogintype
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntlogintype))
          }

        case 18 :
          phonenumber = input.readString()

        case 26 :
          userlogonname = input.readString()

        case 34 :
          emailname = input.readString()

        case 90 :
          userpassword = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserLoginReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasUserlogonname:Bool = false
    private(set) var userlogonname:String = ""

    private(set) var hasTruename:Bool = false
    private(set) var truename:String = ""

    private(set) var hasIdcardnumber:Bool = false
    private(set) var idcardnumber:String = ""

    private(set) var hasRegistertime:Bool = false
    private(set) var registertime:String = ""

    private(set) var hasCursrvtime:Bool = false
    private(set) var cursrvtime:String = ""

    private(set) var hasUseruuid:Bool = false
    private(set) var useruuid:String = ""

    private(set) var hasOfflinetime:Bool = false
    private(set) var offlinetime:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasPhonenumber {
        output.writeString(3, value:phonenumber)
      }
      if hasUserlogonname {
        output.writeString(4, value:userlogonname)
      }
      if hasTruename {
        output.writeString(6, value:truename)
      }
      if hasIdcardnumber {
        output.writeString(7, value:idcardnumber)
      }
      if hasRegistertime {
        output.writeString(8, value:registertime)
      }
      if hasCursrvtime {
        output.writeString(10, value:cursrvtime)
      }
      if hasUseruuid {
        output.writeString(11, value:useruuid)
      }
      if hasOfflinetime {
        output.writeInt32(12, value:offlinetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(3)
      }
      if hasUserlogonname {
        serialize_size += userlogonname.computeStringSize(4)
      }
      if hasTruename {
        serialize_size += truename.computeStringSize(6)
      }
      if hasIdcardnumber {
        serialize_size += idcardnumber.computeStringSize(7)
      }
      if hasRegistertime {
        serialize_size += registertime.computeStringSize(8)
      }
      if hasCursrvtime {
        serialize_size += cursrvtime.computeStringSize(10)
      }
      if hasUseruuid {
        serialize_size += useruuid.computeStringSize(11)
      }
      if hasOfflinetime {
        serialize_size += offlinetime.computeInt32Size(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserLoginReply {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserLoginReply {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserLoginReply {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserLoginReply {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserLoginReply {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserLoginReply {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserLoginReplyBuilder {
      return IteasyNfclock.PkgUserLoginReply.classBuilder() as! IteasyNfclock.PkgUserLoginReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserLoginReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserLoginReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserLoginReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserLoginReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserLoginReplyBuilder {
      return IteasyNfclock.PkgUserLoginReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserLoginReply) -> IteasyNfclock.PkgUserLoginReplyBuilder {
      return IteasyNfclock.PkgUserLoginReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasUserlogonname {
        output += "\(indent) userlogonname: \(userlogonname) \n"
      }
      if hasTruename {
        output += "\(indent) truename: \(truename) \n"
      }
      if hasIdcardnumber {
        output += "\(indent) idcardnumber: \(idcardnumber) \n"
      }
      if hasRegistertime {
        output += "\(indent) registertime: \(registertime) \n"
      }
      if hasCursrvtime {
        output += "\(indent) cursrvtime: \(cursrvtime) \n"
      }
      if hasUseruuid {
        output += "\(indent) useruuid: \(useruuid) \n"
      }
      if hasOfflinetime {
        output += "\(indent) offlinetime: \(offlinetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasUserlogonname {
               hashCode = (hashCode &* 31) &+ userlogonname.hashValue
            }
            if hasTruename {
               hashCode = (hashCode &* 31) &+ truename.hashValue
            }
            if hasIdcardnumber {
               hashCode = (hashCode &* 31) &+ idcardnumber.hashValue
            }
            if hasRegistertime {
               hashCode = (hashCode &* 31) &+ registertime.hashValue
            }
            if hasCursrvtime {
               hashCode = (hashCode &* 31) &+ cursrvtime.hashValue
            }
            if hasUseruuid {
               hashCode = (hashCode &* 31) &+ useruuid.hashValue
            }
            if hasOfflinetime {
               hashCode = (hashCode &* 31) &+ offlinetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserLoginReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserLoginReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserLoginReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserLoginReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserLoginReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserLoginReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasUserlogonname:Bool {
         get {
              return builderResult.hasUserlogonname
         }
    }
    var userlogonname:String {
         get {
              return builderResult.userlogonname
         }
         set (value) {
             builderResult.hasUserlogonname = true
             builderResult.userlogonname = value
         }
    }
    func setUserlogonname(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.userlogonname = value
      return self
    }
    internal func clearUserlogonname() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasUserlogonname = false
         builderResult.userlogonname = ""
         return self
    }
    var hasTruename:Bool {
         get {
              return builderResult.hasTruename
         }
    }
    var truename:String {
         get {
              return builderResult.truename
         }
         set (value) {
             builderResult.hasTruename = true
             builderResult.truename = value
         }
    }
    func setTruename(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.truename = value
      return self
    }
    internal func clearTruename() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasTruename = false
         builderResult.truename = ""
         return self
    }
    var hasIdcardnumber:Bool {
         get {
              return builderResult.hasIdcardnumber
         }
    }
    var idcardnumber:String {
         get {
              return builderResult.idcardnumber
         }
         set (value) {
             builderResult.hasIdcardnumber = true
             builderResult.idcardnumber = value
         }
    }
    func setIdcardnumber(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.idcardnumber = value
      return self
    }
    internal func clearIdcardnumber() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasIdcardnumber = false
         builderResult.idcardnumber = ""
         return self
    }
    var hasRegistertime:Bool {
         get {
              return builderResult.hasRegistertime
         }
    }
    var registertime:String {
         get {
              return builderResult.registertime
         }
         set (value) {
             builderResult.hasRegistertime = true
             builderResult.registertime = value
         }
    }
    func setRegistertime(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.registertime = value
      return self
    }
    internal func clearRegistertime() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasRegistertime = false
         builderResult.registertime = ""
         return self
    }
    var hasCursrvtime:Bool {
         get {
              return builderResult.hasCursrvtime
         }
    }
    var cursrvtime:String {
         get {
              return builderResult.cursrvtime
         }
         set (value) {
             builderResult.hasCursrvtime = true
             builderResult.cursrvtime = value
         }
    }
    func setCursrvtime(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.cursrvtime = value
      return self
    }
    internal func clearCursrvtime() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasCursrvtime = false
         builderResult.cursrvtime = ""
         return self
    }
    var hasUseruuid:Bool {
         get {
              return builderResult.hasUseruuid
         }
    }
    var useruuid:String {
         get {
              return builderResult.useruuid
         }
         set (value) {
             builderResult.hasUseruuid = true
             builderResult.useruuid = value
         }
    }
    func setUseruuid(value:String)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.useruuid = value
      return self
    }
    internal func clearUseruuid() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasUseruuid = false
         builderResult.useruuid = ""
         return self
    }
    var hasOfflinetime:Bool {
         get {
              return builderResult.hasOfflinetime
         }
    }
    var offlinetime:Int32 {
         get {
              return builderResult.offlinetime
         }
         set (value) {
             builderResult.hasOfflinetime = true
             builderResult.offlinetime = value
         }
    }
    func setOfflinetime(value:Int32)-> IteasyNfclock.PkgUserLoginReplyBuilder {
      self.offlinetime = value
      return self
    }
    internal func clearOfflinetime() -> IteasyNfclock.PkgUserLoginReplyBuilder{
         builderResult.hasOfflinetime = false
         builderResult.offlinetime = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserLoginReplyBuilder {
      builderResult = IteasyNfclock.PkgUserLoginReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserLoginReplyBuilder {
      return IteasyNfclock.PkgUserLoginReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserLoginReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserLoginReply {
      var returnMe:IteasyNfclock.PkgUserLoginReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserLoginReply) -> IteasyNfclock.PkgUserLoginReplyBuilder {
      if (other == IteasyNfclock.PkgUserLoginReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasUserlogonname {
           userlogonname = other.userlogonname
      }
      if other.hasTruename {
           truename = other.truename
      }
      if other.hasIdcardnumber {
           idcardnumber = other.idcardnumber
      }
      if other.hasRegistertime {
           registertime = other.registertime
      }
      if other.hasCursrvtime {
           cursrvtime = other.cursrvtime
      }
      if other.hasUseruuid {
           useruuid = other.useruuid
      }
      if other.hasOfflinetime {
           offlinetime = other.offlinetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserLoginReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserLoginReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          phonenumber = input.readString()

        case 34 :
          userlogonname = input.readString()

        case 50 :
          truename = input.readString()

        case 58 :
          idcardnumber = input.readString()

        case 66 :
          registertime = input.readString()

        case 82 :
          cursrvtime = input.readString()

        case 90 :
          useruuid = input.readString()

        case 96 :
          offlinetime = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserGetAuthReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var authtype:IteasyNfclock.EnAuthType = IteasyNfclock.EnAuthType.AuthTypeRegister
    private(set) var hasAuthtype:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPhonenumber {
        output.writeString(1, value:phonenumber)
      }
      if hasAuthtype {
        output.writeEnum(2, value:authtype.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(1)
      }
      if (hasAuthtype) {
        serialize_size += authtype.rawValue.computeEnumSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserGetAuthReq {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserGetAuthReq {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserGetAuthReq {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserGetAuthReq {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserGetAuthReq {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserGetAuthReq {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      return IteasyNfclock.PkgUserGetAuthReq.classBuilder() as! IteasyNfclock.PkgUserGetAuthReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserGetAuthReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserGetAuthReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserGetAuthReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      return IteasyNfclock.PkgUserGetAuthReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserGetAuthReq) -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      return IteasyNfclock.PkgUserGetAuthReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if (hasAuthtype) {
        output += "\(indent) authtype: \(authtype.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasAuthtype {
               hashCode = (hashCode &* 31) &+ Int(authtype.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserGetAuthReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserGetAuthReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserGetAuthReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserGetAuthReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserGetAuthReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserGetAuthReq()
       super.init()
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgUserGetAuthReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgUserGetAuthReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
      var hasAuthtype:Bool{
          get {
              return builderResult.hasAuthtype
          }
      }
      var authtype:IteasyNfclock.EnAuthType {
          get {
              return builderResult.authtype
          }
          set (value) {
              builderResult.hasAuthtype = true
              builderResult.authtype = value
          }
      }
      internal func setAuthtype(value:IteasyNfclock.EnAuthType)-> IteasyNfclock.PkgUserGetAuthReqBuilder {
        self.authtype = value
        return self
      }
      internal func clearAuthtype() -> IteasyNfclock.PkgUserGetAuthReqBuilder {
         builderResult.hasAuthtype = false
         builderResult.authtype = .AuthTypeRegister
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      builderResult = IteasyNfclock.PkgUserGetAuthReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      return IteasyNfclock.PkgUserGetAuthReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserGetAuthReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserGetAuthReq {
      var returnMe:IteasyNfclock.PkgUserGetAuthReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserGetAuthReq) -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      if (other == IteasyNfclock.PkgUserGetAuthReq()) {
       return self
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasAuthtype {
           authtype = other.authtype
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserGetAuthReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserGetAuthReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          phonenumber = input.readString()

        case 16 :
          let valueIntauthtype = input.readEnum()
          if let enumsauthtype = IteasyNfclock.EnAuthType(rawValue:valueIntauthtype){
               authtype = enumsauthtype
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntauthtype))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserGetAuthReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserGetAuthReply {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserGetAuthReply {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserGetAuthReply {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserGetAuthReply {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserGetAuthReply {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserGetAuthReply {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      return IteasyNfclock.PkgUserGetAuthReply.classBuilder() as! IteasyNfclock.PkgUserGetAuthReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserGetAuthReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserGetAuthReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserGetAuthReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      return IteasyNfclock.PkgUserGetAuthReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserGetAuthReply) -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      return IteasyNfclock.PkgUserGetAuthReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserGetAuthReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserGetAuthReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserGetAuthReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserGetAuthReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserGetAuthReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserGetAuthReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserGetAuthReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserGetAuthReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      builderResult = IteasyNfclock.PkgUserGetAuthReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      return IteasyNfclock.PkgUserGetAuthReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserGetAuthReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserGetAuthReply {
      var returnMe:IteasyNfclock.PkgUserGetAuthReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserGetAuthReply) -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      if (other == IteasyNfclock.PkgUserGetAuthReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserGetAuthReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserGetAuthReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserResetPhonenumberReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasAuthcode:Bool = false
    private(set) var authcode:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPhonenumber {
        output.writeString(1, value:phonenumber)
      }
      if hasAuthcode {
        output.writeString(3, value:authcode)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(1)
      }
      if hasAuthcode {
        serialize_size += authcode.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserResetPhonenumberReq {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserResetPhonenumberReq {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserResetPhonenumberReq {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserResetPhonenumberReq {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserResetPhonenumberReq {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserResetPhonenumberReq {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReq.classBuilder() as! IteasyNfclock.PkgUserResetPhonenumberReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserResetPhonenumberReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserResetPhonenumberReq) -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasAuthcode {
        output += "\(indent) authcode: \(authcode) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasAuthcode {
               hashCode = (hashCode &* 31) &+ authcode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserResetPhonenumberReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserResetPhonenumberReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserResetPhonenumberReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserResetPhonenumberReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserResetPhonenumberReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserResetPhonenumberReq()
       super.init()
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasAuthcode:Bool {
         get {
              return builderResult.hasAuthcode
         }
    }
    var authcode:String {
         get {
              return builderResult.authcode
         }
         set (value) {
             builderResult.hasAuthcode = true
             builderResult.authcode = value
         }
    }
    func setAuthcode(value:String)-> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      self.authcode = value
      return self
    }
    internal func clearAuthcode() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder{
         builderResult.hasAuthcode = false
         builderResult.authcode = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      builderResult = IteasyNfclock.PkgUserResetPhonenumberReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserResetPhonenumberReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserResetPhonenumberReq {
      var returnMe:IteasyNfclock.PkgUserResetPhonenumberReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserResetPhonenumberReq) -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      if (other == IteasyNfclock.PkgUserResetPhonenumberReq()) {
       return self
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasAuthcode {
           authcode = other.authcode
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserResetPhonenumberReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          phonenumber = input.readString()

        case 26 :
          authcode = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserResetPhonenumberReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserResetPhonenumberReply {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserResetPhonenumberReply {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserResetPhonenumberReply {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserResetPhonenumberReply {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserResetPhonenumberReply {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserResetPhonenumberReply {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReply.classBuilder() as! IteasyNfclock.PkgUserResetPhonenumberReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserResetPhonenumberReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserResetPhonenumberReply) -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserResetPhonenumberReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserResetPhonenumberReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserResetPhonenumberReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserResetPhonenumberReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserResetPhonenumberReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserResetPhonenumberReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      builderResult = IteasyNfclock.PkgUserResetPhonenumberReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      return IteasyNfclock.PkgUserResetPhonenumberReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserResetPhonenumberReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserResetPhonenumberReply {
      var returnMe:IteasyNfclock.PkgUserResetPhonenumberReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserResetPhonenumberReply) -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      if (other == IteasyNfclock.PkgUserResetPhonenumberReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserResetPhonenumberReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserAuthSetReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasTruename:Bool = false
    private(set) var truename:String = ""

    private(set) var hasAuthcode:Bool = false
    private(set) var authcode:String = ""

    private(set) var hasPassword:Bool = false
    private(set) var password:String = ""

    private(set) var authtype:IteasyNfclock.EnAuthType = IteasyNfclock.EnAuthType.AuthTypeRegister
    private(set) var hasAuthtype:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPhonenumber {
        output.writeString(1, value:phonenumber)
      }
      if hasTruename {
        output.writeString(2, value:truename)
      }
      if hasAuthcode {
        output.writeString(3, value:authcode)
      }
      if hasPassword {
        output.writeString(4, value:password)
      }
      if hasAuthtype {
        output.writeEnum(5, value:authtype.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(1)
      }
      if hasTruename {
        serialize_size += truename.computeStringSize(2)
      }
      if hasAuthcode {
        serialize_size += authcode.computeStringSize(3)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(4)
      }
      if (hasAuthtype) {
        serialize_size += authtype.rawValue.computeEnumSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserAuthSetReq {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAuthSetReq {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserAuthSetReq {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserAuthSetReq {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserAuthSetReq {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAuthSetReq {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      return IteasyNfclock.PkgUserAuthSetReq.classBuilder() as! IteasyNfclock.PkgUserAuthSetReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserAuthSetReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAuthSetReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAuthSetReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      return IteasyNfclock.PkgUserAuthSetReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserAuthSetReq) -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      return IteasyNfclock.PkgUserAuthSetReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasTruename {
        output += "\(indent) truename: \(truename) \n"
      }
      if hasAuthcode {
        output += "\(indent) authcode: \(authcode) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      if (hasAuthtype) {
        output += "\(indent) authtype: \(authtype.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasTruename {
               hashCode = (hashCode &* 31) &+ truename.hashValue
            }
            if hasAuthcode {
               hashCode = (hashCode &* 31) &+ authcode.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasAuthtype {
               hashCode = (hashCode &* 31) &+ Int(authtype.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserAuthSetReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserAuthSetReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserAuthSetReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserAuthSetReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserAuthSetReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserAuthSetReq()
       super.init()
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgUserAuthSetReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgUserAuthSetReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasTruename:Bool {
         get {
              return builderResult.hasTruename
         }
    }
    var truename:String {
         get {
              return builderResult.truename
         }
         set (value) {
             builderResult.hasTruename = true
             builderResult.truename = value
         }
    }
    func setTruename(value:String)-> IteasyNfclock.PkgUserAuthSetReqBuilder {
      self.truename = value
      return self
    }
    internal func clearTruename() -> IteasyNfclock.PkgUserAuthSetReqBuilder{
         builderResult.hasTruename = false
         builderResult.truename = ""
         return self
    }
    var hasAuthcode:Bool {
         get {
              return builderResult.hasAuthcode
         }
    }
    var authcode:String {
         get {
              return builderResult.authcode
         }
         set (value) {
             builderResult.hasAuthcode = true
             builderResult.authcode = value
         }
    }
    func setAuthcode(value:String)-> IteasyNfclock.PkgUserAuthSetReqBuilder {
      self.authcode = value
      return self
    }
    internal func clearAuthcode() -> IteasyNfclock.PkgUserAuthSetReqBuilder{
         builderResult.hasAuthcode = false
         builderResult.authcode = ""
         return self
    }
    var hasPassword:Bool {
         get {
              return builderResult.hasPassword
         }
    }
    var password:String {
         get {
              return builderResult.password
         }
         set (value) {
             builderResult.hasPassword = true
             builderResult.password = value
         }
    }
    func setPassword(value:String)-> IteasyNfclock.PkgUserAuthSetReqBuilder {
      self.password = value
      return self
    }
    internal func clearPassword() -> IteasyNfclock.PkgUserAuthSetReqBuilder{
         builderResult.hasPassword = false
         builderResult.password = ""
         return self
    }
      var hasAuthtype:Bool{
          get {
              return builderResult.hasAuthtype
          }
      }
      var authtype:IteasyNfclock.EnAuthType {
          get {
              return builderResult.authtype
          }
          set (value) {
              builderResult.hasAuthtype = true
              builderResult.authtype = value
          }
      }
      internal func setAuthtype(value:IteasyNfclock.EnAuthType)-> IteasyNfclock.PkgUserAuthSetReqBuilder {
        self.authtype = value
        return self
      }
      internal func clearAuthtype() -> IteasyNfclock.PkgUserAuthSetReqBuilder {
         builderResult.hasAuthtype = false
         builderResult.authtype = .AuthTypeRegister
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      builderResult = IteasyNfclock.PkgUserAuthSetReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      return IteasyNfclock.PkgUserAuthSetReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserAuthSetReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserAuthSetReq {
      var returnMe:IteasyNfclock.PkgUserAuthSetReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserAuthSetReq) -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      if (other == IteasyNfclock.PkgUserAuthSetReq()) {
       return self
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasTruename {
           truename = other.truename
      }
      if other.hasAuthcode {
           authcode = other.authcode
      }
      if other.hasPassword {
           password = other.password
      }
      if other.hasAuthtype {
           authtype = other.authtype
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserAuthSetReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAuthSetReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          phonenumber = input.readString()

        case 18 :
          truename = input.readString()

        case 26 :
          authcode = input.readString()

        case 34 :
          password = input.readString()

        case 40 :
          let valueIntauthtype = input.readEnum()
          if let enumsauthtype = IteasyNfclock.EnAuthType(rawValue:valueIntauthtype){
               authtype = enumsauthtype
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntauthtype))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserAuthSetReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserAuthSetReply {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAuthSetReply {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserAuthSetReply {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserAuthSetReply {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserAuthSetReply {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAuthSetReply {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      return IteasyNfclock.PkgUserAuthSetReply.classBuilder() as! IteasyNfclock.PkgUserAuthSetReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserAuthSetReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAuthSetReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAuthSetReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      return IteasyNfclock.PkgUserAuthSetReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserAuthSetReply) -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      return IteasyNfclock.PkgUserAuthSetReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserAuthSetReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserAuthSetReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserAuthSetReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserAuthSetReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserAuthSetReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserAuthSetReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserAuthSetReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserAuthSetReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      builderResult = IteasyNfclock.PkgUserAuthSetReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      return IteasyNfclock.PkgUserAuthSetReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserAuthSetReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserAuthSetReply {
      var returnMe:IteasyNfclock.PkgUserAuthSetReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserAuthSetReply) -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      if (other == IteasyNfclock.PkgUserAuthSetReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserAuthSetReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAuthSetReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockAddOpenrecordReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasRecord:Bool = false
    private(set) var record:IteasyNfclock.db_lock_open_record!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasRecord {
        output.writeMessage(1, value:record)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRecord {
          if let varSizerecord = record?.computeMessageSize(1) {
              serialize_size += varSizerecord
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockAddOpenrecordReq {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddOpenrecordReq {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockAddOpenrecordReq {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockAddOpenrecordReq {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockAddOpenrecordReq {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddOpenrecordReq {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReq.classBuilder() as! IteasyNfclock.PkgLockAddOpenrecordReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockAddOpenrecordReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockAddOpenrecordReq) -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasRecord {
        output += "\(indent) record {\n"
        record?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRecord {
                if let hashValuerecord = record?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuerecord
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockAddOpenrecordReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockAddOpenrecordReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockAddOpenrecordReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockAddOpenrecordReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockAddOpenrecordReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockAddOpenrecordReq()
       super.init()
    }
    var hasRecord:Bool {
         get {
             return builderResult.hasRecord
         }
    }
    var record:IteasyNfclock.db_lock_open_record! {
         get {
             return builderResult.record
         }
         set (value) {
             builderResult.hasRecord = true
             builderResult.record = value
         }
    }
    func setRecord(value:IteasyNfclock.db_lock_open_record!)-> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      self.record = value
      return self
    }
    internal func mergeRecord(value:IteasyNfclock.db_lock_open_record) -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      if (builderResult.hasRecord) {
        builderResult.record = IteasyNfclock.db_lock_open_record.builderWithPrototype(builderResult.record).mergeFrom(value).buildPartial()
      } else {
        builderResult.record = value
      }
      builderResult.hasRecord = true
      return self
    }
    internal func clearRecord() -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      builderResult.hasRecord = false
      builderResult.record = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      builderResult = IteasyNfclock.PkgLockAddOpenrecordReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockAddOpenrecordReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockAddOpenrecordReq {
      var returnMe:IteasyNfclock.PkgLockAddOpenrecordReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockAddOpenrecordReq) -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      if (other == IteasyNfclock.PkgLockAddOpenrecordReq()) {
       return self
      }
      if (other.hasRecord) {
          mergeRecord(other.record)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddOpenrecordReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:IteasyNfclock.db_lock_open_recordBuilder = IteasyNfclock.db_lock_open_record.builder()
          if hasRecord {
            subBuilder.mergeFrom(record)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          record = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockAddOpenrecordReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockAddOpenrecordReply {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddOpenrecordReply {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockAddOpenrecordReply {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockAddOpenrecordReply {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockAddOpenrecordReply {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddOpenrecordReply {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReply.classBuilder() as! IteasyNfclock.PkgLockAddOpenrecordReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockAddOpenrecordReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockAddOpenrecordReply) -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockAddOpenrecordReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockAddOpenrecordReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockAddOpenrecordReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockAddOpenrecordReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockAddOpenrecordReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockAddOpenrecordReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      builderResult = IteasyNfclock.PkgLockAddOpenrecordReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockAddOpenrecordReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockAddOpenrecordReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockAddOpenrecordReply {
      var returnMe:IteasyNfclock.PkgLockAddOpenrecordReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockAddOpenrecordReply) -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      if (other == IteasyNfclock.PkgLockAddOpenrecordReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddOpenrecordReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockAddUsersReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasPermissiondesc:Bool = false
    private(set) var permissiondesc:String = ""

    private(set) var useruuidlist:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if !useruuidlist.isEmpty {
        for oneValueuseruuidlist in useruuidlist {
          output.writeString(2, value:oneValueuseruuidlist)
        }
      }
      if hasPermissiondesc {
        output.writeString(3, value:permissiondesc)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      var dataSizeUseruuidlist:Int32 = 0
      for oneValueuseruuidlist in useruuidlist {
          dataSizeUseruuidlist += oneValueuseruuidlist.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUseruuidlist
      serialize_size += 1 * Int32(useruuidlist.count)
      if hasPermissiondesc {
        serialize_size += permissiondesc.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockAddUsersReq {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddUsersReq {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockAddUsersReq {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockAddUsersReq {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockAddUsersReq {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddUsersReq {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      return IteasyNfclock.PkgLockAddUsersReq.classBuilder() as! IteasyNfclock.PkgLockAddUsersReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockAddUsersReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddUsersReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddUsersReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      return IteasyNfclock.PkgLockAddUsersReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockAddUsersReq) -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      return IteasyNfclock.PkgLockAddUsersReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      var useruuidlistElementIndex:Int = 0
      for oneValueuseruuidlist in useruuidlist  {
          output += "\(indent) useruuidlist[\(useruuidlistElementIndex)]: \(oneValueuseruuidlist)\n"
          useruuidlistElementIndex++
      }
      if hasPermissiondesc {
        output += "\(indent) permissiondesc: \(permissiondesc) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            for oneValueuseruuidlist in useruuidlist {
                hashCode = (hashCode &* 31) &+ oneValueuseruuidlist.hashValue
            }
            if hasPermissiondesc {
               hashCode = (hashCode &* 31) &+ permissiondesc.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockAddUsersReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockAddUsersReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockAddUsersReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockAddUsersReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockAddUsersReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockAddUsersReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockAddUsersReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockAddUsersReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var useruuidlist:Array<String> {
         get {
             return builderResult.useruuidlist
         }
         set (array) {
             builderResult.useruuidlist = array
         }
    }
    func setUseruuidlist(value:Array<String>)-> IteasyNfclock.PkgLockAddUsersReqBuilder {
      self.useruuidlist = value
      return self
    }
    internal func clearUseruuidlist() -> IteasyNfclock.PkgLockAddUsersReqBuilder {
       builderResult.useruuidlist.removeAll(keepCapacity: false)
       return self
    }
    var hasPermissiondesc:Bool {
         get {
              return builderResult.hasPermissiondesc
         }
    }
    var permissiondesc:String {
         get {
              return builderResult.permissiondesc
         }
         set (value) {
             builderResult.hasPermissiondesc = true
             builderResult.permissiondesc = value
         }
    }
    func setPermissiondesc(value:String)-> IteasyNfclock.PkgLockAddUsersReqBuilder {
      self.permissiondesc = value
      return self
    }
    internal func clearPermissiondesc() -> IteasyNfclock.PkgLockAddUsersReqBuilder{
         builderResult.hasPermissiondesc = false
         builderResult.permissiondesc = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      builderResult = IteasyNfclock.PkgLockAddUsersReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      return IteasyNfclock.PkgLockAddUsersReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockAddUsersReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockAddUsersReq {
      var returnMe:IteasyNfclock.PkgLockAddUsersReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockAddUsersReq) -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      if (other == IteasyNfclock.PkgLockAddUsersReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if !other.useruuidlist.isEmpty {
          builderResult.useruuidlist += other.useruuidlist
      }
      if other.hasPermissiondesc {
           permissiondesc = other.permissiondesc
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockAddUsersReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddUsersReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 18 :
          useruuidlist += [input.readString()]

        case 26 :
          permissiondesc = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockAddUsersReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockAddUsersReply {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddUsersReply {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockAddUsersReply {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockAddUsersReply {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockAddUsersReply {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddUsersReply {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      return IteasyNfclock.PkgLockAddUsersReply.classBuilder() as! IteasyNfclock.PkgLockAddUsersReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockAddUsersReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddUsersReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddUsersReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      return IteasyNfclock.PkgLockAddUsersReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockAddUsersReply) -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      return IteasyNfclock.PkgLockAddUsersReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockAddUsersReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockAddUsersReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockAddUsersReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockAddUsersReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockAddUsersReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockAddUsersReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockAddUsersReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockAddUsersReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      builderResult = IteasyNfclock.PkgLockAddUsersReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      return IteasyNfclock.PkgLockAddUsersReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockAddUsersReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockAddUsersReply {
      var returnMe:IteasyNfclock.PkgLockAddUsersReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockAddUsersReply) -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      if (other == IteasyNfclock.PkgLockAddUsersReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockAddUsersReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddUsersReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockDeleteUsersReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var useruuidlist:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if !useruuidlist.isEmpty {
        for oneValueuseruuidlist in useruuidlist {
          output.writeString(2, value:oneValueuseruuidlist)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      var dataSizeUseruuidlist:Int32 = 0
      for oneValueuseruuidlist in useruuidlist {
          dataSizeUseruuidlist += oneValueuseruuidlist.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUseruuidlist
      serialize_size += 1 * Int32(useruuidlist.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockDeleteUsersReq {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockDeleteUsersReq {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockDeleteUsersReq {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockDeleteUsersReq {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockDeleteUsersReq {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockDeleteUsersReq {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReq.classBuilder() as! IteasyNfclock.PkgLockDeleteUsersReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockDeleteUsersReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockDeleteUsersReq) -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      var useruuidlistElementIndex:Int = 0
      for oneValueuseruuidlist in useruuidlist  {
          output += "\(indent) useruuidlist[\(useruuidlistElementIndex)]: \(oneValueuseruuidlist)\n"
          useruuidlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            for oneValueuseruuidlist in useruuidlist {
                hashCode = (hashCode &* 31) &+ oneValueuseruuidlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockDeleteUsersReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockDeleteUsersReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockDeleteUsersReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockDeleteUsersReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockDeleteUsersReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockDeleteUsersReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var useruuidlist:Array<String> {
         get {
             return builderResult.useruuidlist
         }
         set (array) {
             builderResult.useruuidlist = array
         }
    }
    func setUseruuidlist(value:Array<String>)-> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      self.useruuidlist = value
      return self
    }
    internal func clearUseruuidlist() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
       builderResult.useruuidlist.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      builderResult = IteasyNfclock.PkgLockDeleteUsersReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockDeleteUsersReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockDeleteUsersReq {
      var returnMe:IteasyNfclock.PkgLockDeleteUsersReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockDeleteUsersReq) -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      if (other == IteasyNfclock.PkgLockDeleteUsersReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if !other.useruuidlist.isEmpty {
          builderResult.useruuidlist += other.useruuidlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockDeleteUsersReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockDeleteUsersReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 18 :
          useruuidlist += [input.readString()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockDeleteUsersReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockDeleteUsersReply {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockDeleteUsersReply {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockDeleteUsersReply {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockDeleteUsersReply {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockDeleteUsersReply {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockDeleteUsersReply {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReply.classBuilder() as! IteasyNfclock.PkgLockDeleteUsersReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockDeleteUsersReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockDeleteUsersReply) -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockDeleteUsersReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockDeleteUsersReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockDeleteUsersReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockDeleteUsersReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockDeleteUsersReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockDeleteUsersReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      builderResult = IteasyNfclock.PkgLockDeleteUsersReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      return IteasyNfclock.PkgLockDeleteUsersReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockDeleteUsersReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockDeleteUsersReply {
      var returnMe:IteasyNfclock.PkgLockDeleteUsersReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockDeleteUsersReply) -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      if (other == IteasyNfclock.PkgLockDeleteUsersReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockDeleteUsersReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserAddReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasUser:Bool = false
    private(set) var user:IteasyNfclock.db_lock_user_user!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUser {
        output.writeMessage(1, value:user)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(1) {
              serialize_size += varSizeuser
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserAddReq {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAddReq {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserAddReq {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserAddReq {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserAddReq {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAddReq {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserAddReqBuilder {
      return IteasyNfclock.PkgUserAddReq.classBuilder() as! IteasyNfclock.PkgUserAddReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserAddReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserAddReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAddReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAddReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserAddReqBuilder {
      return IteasyNfclock.PkgUserAddReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserAddReq) -> IteasyNfclock.PkgUserAddReqBuilder {
      return IteasyNfclock.PkgUserAddReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUser {
        output += "\(indent) user {\n"
        user?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserAddReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserAddReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserAddReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserAddReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserAddReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserAddReq()
       super.init()
    }
    var hasUser:Bool {
         get {
             return builderResult.hasUser
         }
    }
    var user:IteasyNfclock.db_lock_user_user! {
         get {
             return builderResult.user
         }
         set (value) {
             builderResult.hasUser = true
             builderResult.user = value
         }
    }
    func setUser(value:IteasyNfclock.db_lock_user_user!)-> IteasyNfclock.PkgUserAddReqBuilder {
      self.user = value
      return self
    }
    internal func mergeUser(value:IteasyNfclock.db_lock_user_user) -> IteasyNfclock.PkgUserAddReqBuilder {
      if (builderResult.hasUser) {
        builderResult.user = IteasyNfclock.db_lock_user_user.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
      } else {
        builderResult.user = value
      }
      builderResult.hasUser = true
      return self
    }
    internal func clearUser() -> IteasyNfclock.PkgUserAddReqBuilder {
      builderResult.hasUser = false
      builderResult.user = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserAddReqBuilder {
      builderResult = IteasyNfclock.PkgUserAddReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserAddReqBuilder {
      return IteasyNfclock.PkgUserAddReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserAddReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserAddReq {
      var returnMe:IteasyNfclock.PkgUserAddReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserAddReq) -> IteasyNfclock.PkgUserAddReqBuilder {
      if (other == IteasyNfclock.PkgUserAddReq()) {
       return self
      }
      if (other.hasUser) {
          mergeUser(other.user)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserAddReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAddReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:IteasyNfclock.db_lock_user_userBuilder = IteasyNfclock.db_lock_user_user.builder()
          if hasUser {
            subBuilder.mergeFrom(user)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          user = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserAddReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserAddReply {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAddReply {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserAddReply {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserAddReply {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserAddReply {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAddReply {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserAddReplyBuilder {
      return IteasyNfclock.PkgUserAddReply.classBuilder() as! IteasyNfclock.PkgUserAddReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserAddReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserAddReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAddReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserAddReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserAddReplyBuilder {
      return IteasyNfclock.PkgUserAddReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserAddReply) -> IteasyNfclock.PkgUserAddReplyBuilder {
      return IteasyNfclock.PkgUserAddReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserAddReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserAddReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserAddReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserAddReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserAddReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserAddReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserAddReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserAddReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserAddReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserAddReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserAddReplyBuilder {
      builderResult = IteasyNfclock.PkgUserAddReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserAddReplyBuilder {
      return IteasyNfclock.PkgUserAddReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserAddReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserAddReply {
      var returnMe:IteasyNfclock.PkgUserAddReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserAddReply) -> IteasyNfclock.PkgUserAddReplyBuilder {
      if (other == IteasyNfclock.PkgUserAddReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserAddReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserAddReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserDelReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var uuidlist:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !uuidlist.isEmpty {
        for oneValueuuidlist in uuidlist {
          output.writeString(1, value:oneValueuuidlist)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeUuidlist:Int32 = 0
      for oneValueuuidlist in uuidlist {
          dataSizeUuidlist += oneValueuuidlist.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUuidlist
      serialize_size += 1 * Int32(uuidlist.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserDelReq {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserDelReq {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserDelReq {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserDelReq {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserDelReq {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserDelReq {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserDelReqBuilder {
      return IteasyNfclock.PkgUserDelReq.classBuilder() as! IteasyNfclock.PkgUserDelReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserDelReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserDelReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserDelReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserDelReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserDelReqBuilder {
      return IteasyNfclock.PkgUserDelReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserDelReq) -> IteasyNfclock.PkgUserDelReqBuilder {
      return IteasyNfclock.PkgUserDelReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var uuidlistElementIndex:Int = 0
      for oneValueuuidlist in uuidlist  {
          output += "\(indent) uuidlist[\(uuidlistElementIndex)]: \(oneValueuuidlist)\n"
          uuidlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueuuidlist in uuidlist {
                hashCode = (hashCode &* 31) &+ oneValueuuidlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserDelReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserDelReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserDelReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserDelReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserDelReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserDelReq()
       super.init()
    }
    var uuidlist:Array<String> {
         get {
             return builderResult.uuidlist
         }
         set (array) {
             builderResult.uuidlist = array
         }
    }
    func setUuidlist(value:Array<String>)-> IteasyNfclock.PkgUserDelReqBuilder {
      self.uuidlist = value
      return self
    }
    internal func clearUuidlist() -> IteasyNfclock.PkgUserDelReqBuilder {
       builderResult.uuidlist.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserDelReqBuilder {
      builderResult = IteasyNfclock.PkgUserDelReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserDelReqBuilder {
      return IteasyNfclock.PkgUserDelReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserDelReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserDelReq {
      var returnMe:IteasyNfclock.PkgUserDelReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserDelReq) -> IteasyNfclock.PkgUserDelReqBuilder {
      if (other == IteasyNfclock.PkgUserDelReq()) {
       return self
      }
      if !other.uuidlist.isEmpty {
          builderResult.uuidlist += other.uuidlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserDelReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserDelReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          uuidlist += [input.readString()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserDelReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserDelReply {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserDelReply {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserDelReply {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserDelReply {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserDelReply {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserDelReply {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserDelReplyBuilder {
      return IteasyNfclock.PkgUserDelReply.classBuilder() as! IteasyNfclock.PkgUserDelReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserDelReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserDelReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserDelReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserDelReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserDelReplyBuilder {
      return IteasyNfclock.PkgUserDelReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserDelReply) -> IteasyNfclock.PkgUserDelReplyBuilder {
      return IteasyNfclock.PkgUserDelReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserDelReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserDelReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserDelReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserDelReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserDelReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserDelReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserDelReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserDelReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserDelReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserDelReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserDelReplyBuilder {
      builderResult = IteasyNfclock.PkgUserDelReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserDelReplyBuilder {
      return IteasyNfclock.PkgUserDelReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserDelReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserDelReply {
      var returnMe:IteasyNfclock.PkgUserDelReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserDelReply) -> IteasyNfclock.PkgUserDelReplyBuilder {
      if (other == IteasyNfclock.PkgUserDelReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserDelReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserDelReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockAddReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLock:Bool = false
    private(set) var lock:IteasyNfclock.db_lock!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLock {
        output.writeMessage(1, value:lock)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLock {
          if let varSizelock = lock?.computeMessageSize(1) {
              serialize_size += varSizelock
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockAddReq {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddReq {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockAddReq {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockAddReq {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockAddReq {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddReq {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockAddReqBuilder {
      return IteasyNfclock.PkgLockAddReq.classBuilder() as! IteasyNfclock.PkgLockAddReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockAddReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockAddReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockAddReqBuilder {
      return IteasyNfclock.PkgLockAddReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockAddReq) -> IteasyNfclock.PkgLockAddReqBuilder {
      return IteasyNfclock.PkgLockAddReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLock {
        output += "\(indent) lock {\n"
        lock?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLock {
                if let hashValuelock = lock?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelock
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockAddReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockAddReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockAddReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockAddReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockAddReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockAddReq()
       super.init()
    }
    var hasLock:Bool {
         get {
             return builderResult.hasLock
         }
    }
    var lock:IteasyNfclock.db_lock! {
         get {
             return builderResult.lock
         }
         set (value) {
             builderResult.hasLock = true
             builderResult.lock = value
         }
    }
    func setLock(value:IteasyNfclock.db_lock!)-> IteasyNfclock.PkgLockAddReqBuilder {
      self.lock = value
      return self
    }
    internal func mergeLock(value:IteasyNfclock.db_lock) -> IteasyNfclock.PkgLockAddReqBuilder {
      if (builderResult.hasLock) {
        builderResult.lock = IteasyNfclock.db_lock.builderWithPrototype(builderResult.lock).mergeFrom(value).buildPartial()
      } else {
        builderResult.lock = value
      }
      builderResult.hasLock = true
      return self
    }
    internal func clearLock() -> IteasyNfclock.PkgLockAddReqBuilder {
      builderResult.hasLock = false
      builderResult.lock = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockAddReqBuilder {
      builderResult = IteasyNfclock.PkgLockAddReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockAddReqBuilder {
      return IteasyNfclock.PkgLockAddReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockAddReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockAddReq {
      var returnMe:IteasyNfclock.PkgLockAddReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockAddReq) -> IteasyNfclock.PkgLockAddReqBuilder {
      if (other == IteasyNfclock.PkgLockAddReq()) {
       return self
      }
      if (other.hasLock) {
          mergeLock(other.lock)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockAddReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:IteasyNfclock.db_lockBuilder = IteasyNfclock.db_lock.builder()
          if hasLock {
            subBuilder.mergeFrom(lock)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          lock = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockAddReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockAddReply {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddReply {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockAddReply {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockAddReply {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockAddReply {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddReply {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockAddReplyBuilder {
      return IteasyNfclock.PkgLockAddReply.classBuilder() as! IteasyNfclock.PkgLockAddReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockAddReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockAddReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockAddReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockAddReplyBuilder {
      return IteasyNfclock.PkgLockAddReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockAddReply) -> IteasyNfclock.PkgLockAddReplyBuilder {
      return IteasyNfclock.PkgLockAddReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockAddReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockAddReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockAddReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockAddReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockAddReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockAddReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockAddReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockAddReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockAddReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockAddReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockAddReplyBuilder {
      builderResult = IteasyNfclock.PkgLockAddReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockAddReplyBuilder {
      return IteasyNfclock.PkgLockAddReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockAddReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockAddReply {
      var returnMe:IteasyNfclock.PkgLockAddReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockAddReply) -> IteasyNfclock.PkgLockAddReplyBuilder {
      if (other == IteasyNfclock.PkgLockAddReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockAddReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockAddReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockLogOffReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockLogOffReq {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockLogOffReq {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockLogOffReq {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockLogOffReq {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockLogOffReq {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockLogOffReq {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockLogOffReqBuilder {
      return IteasyNfclock.PkgLockLogOffReq.classBuilder() as! IteasyNfclock.PkgLockLogOffReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockLogOffReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockLogOffReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockLogOffReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockLogOffReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockLogOffReqBuilder {
      return IteasyNfclock.PkgLockLogOffReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockLogOffReq) -> IteasyNfclock.PkgLockLogOffReqBuilder {
      return IteasyNfclock.PkgLockLogOffReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockLogOffReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockLogOffReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockLogOffReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockLogOffReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockLogOffReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockLogOffReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockLogOffReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockLogOffReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockLogOffReqBuilder {
      builderResult = IteasyNfclock.PkgLockLogOffReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockLogOffReqBuilder {
      return IteasyNfclock.PkgLockLogOffReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockLogOffReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockLogOffReq {
      var returnMe:IteasyNfclock.PkgLockLogOffReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockLogOffReq) -> IteasyNfclock.PkgLockLogOffReqBuilder {
      if (other == IteasyNfclock.PkgLockLogOffReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockLogOffReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockLogOffReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockLogOffReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockLogOffReply {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockLogOffReply {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockLogOffReply {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockLogOffReply {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockLogOffReply {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockLogOffReply {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      return IteasyNfclock.PkgLockLogOffReply.classBuilder() as! IteasyNfclock.PkgLockLogOffReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockLogOffReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockLogOffReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockLogOffReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      return IteasyNfclock.PkgLockLogOffReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockLogOffReply) -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      return IteasyNfclock.PkgLockLogOffReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockLogOffReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockLogOffReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockLogOffReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockLogOffReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockLogOffReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockLogOffReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockLogOffReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockLogOffReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockLogOffReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockLogOffReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      builderResult = IteasyNfclock.PkgLockLogOffReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      return IteasyNfclock.PkgLockLogOffReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockLogOffReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockLogOffReply {
      var returnMe:IteasyNfclock.PkgLockLogOffReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockLogOffReply) -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      if (other == IteasyNfclock.PkgLockLogOffReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockLogOffReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockLogOffReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUpdateLockPasswordReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasOldpassword:Bool = false
    private(set) var oldpassword:String = ""

    private(set) var hasNewpassword:Bool = false
    private(set) var newpassword:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if hasOldpassword {
        output.writeString(2, value:oldpassword)
      }
      if hasNewpassword {
        output.writeString(3, value:newpassword)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      if hasOldpassword {
        serialize_size += oldpassword.computeStringSize(2)
      }
      if hasNewpassword {
        serialize_size += newpassword.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUpdateLockPasswordReq {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUpdateLockPasswordReq {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUpdateLockPasswordReq {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUpdateLockPasswordReq {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUpdateLockPasswordReq {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUpdateLockPasswordReq {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReq.classBuilder() as! IteasyNfclock.PkgUpdateLockPasswordReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUpdateLockPasswordReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUpdateLockPasswordReq) -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasOldpassword {
        output += "\(indent) oldpassword: \(oldpassword) \n"
      }
      if hasNewpassword {
        output += "\(indent) newpassword: \(newpassword) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasOldpassword {
               hashCode = (hashCode &* 31) &+ oldpassword.hashValue
            }
            if hasNewpassword {
               hashCode = (hashCode &* 31) &+ newpassword.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUpdateLockPasswordReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUpdateLockPasswordReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUpdateLockPasswordReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUpdateLockPasswordReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUpdateLockPasswordReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUpdateLockPasswordReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasOldpassword:Bool {
         get {
              return builderResult.hasOldpassword
         }
    }
    var oldpassword:String {
         get {
              return builderResult.oldpassword
         }
         set (value) {
             builderResult.hasOldpassword = true
             builderResult.oldpassword = value
         }
    }
    func setOldpassword(value:String)-> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      self.oldpassword = value
      return self
    }
    internal func clearOldpassword() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder{
         builderResult.hasOldpassword = false
         builderResult.oldpassword = ""
         return self
    }
    var hasNewpassword:Bool {
         get {
              return builderResult.hasNewpassword
         }
    }
    var newpassword:String {
         get {
              return builderResult.newpassword
         }
         set (value) {
             builderResult.hasNewpassword = true
             builderResult.newpassword = value
         }
    }
    func setNewpassword(value:String)-> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      self.newpassword = value
      return self
    }
    internal func clearNewpassword() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder{
         builderResult.hasNewpassword = false
         builderResult.newpassword = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      builderResult = IteasyNfclock.PkgUpdateLockPasswordReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUpdateLockPasswordReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUpdateLockPasswordReq {
      var returnMe:IteasyNfclock.PkgUpdateLockPasswordReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUpdateLockPasswordReq) -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      if (other == IteasyNfclock.PkgUpdateLockPasswordReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasOldpassword {
           oldpassword = other.oldpassword
      }
      if other.hasNewpassword {
           newpassword = other.newpassword
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUpdateLockPasswordReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 18 :
          oldpassword = input.readString()

        case 26 :
          newpassword = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUpdateLockPasswordReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUpdateLockPasswordReply {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUpdateLockPasswordReply {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUpdateLockPasswordReply {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUpdateLockPasswordReply {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUpdateLockPasswordReply {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUpdateLockPasswordReply {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReply.classBuilder() as! IteasyNfclock.PkgUpdateLockPasswordReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUpdateLockPasswordReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUpdateLockPasswordReply) -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUpdateLockPasswordReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUpdateLockPasswordReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUpdateLockPasswordReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUpdateLockPasswordReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUpdateLockPasswordReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUpdateLockPasswordReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      builderResult = IteasyNfclock.PkgUpdateLockPasswordReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      return IteasyNfclock.PkgUpdateLockPasswordReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUpdateLockPasswordReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUpdateLockPasswordReply {
      var returnMe:IteasyNfclock.PkgUpdateLockPasswordReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUpdateLockPasswordReply) -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      if (other == IteasyNfclock.PkgUpdateLockPasswordReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUpdateLockPasswordReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgNameIDCardRegisterReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasTruename:Bool = false
    private(set) var truename:String = ""

    private(set) var hasIdcardnumber:Bool = false
    private(set) var idcardnumber:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasTruename {
        output.writeString(1, value:truename)
      }
      if hasIdcardnumber {
        output.writeString(2, value:idcardnumber)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTruename {
        serialize_size += truename.computeStringSize(1)
      }
      if hasIdcardnumber {
        serialize_size += idcardnumber.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgNameIDCardRegisterReq {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgNameIDCardRegisterReq {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgNameIDCardRegisterReq {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgNameIDCardRegisterReq {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgNameIDCardRegisterReq {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgNameIDCardRegisterReq {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReq.classBuilder() as! IteasyNfclock.PkgNameIDCardRegisterReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgNameIDCardRegisterReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgNameIDCardRegisterReq) -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasTruename {
        output += "\(indent) truename: \(truename) \n"
      }
      if hasIdcardnumber {
        output += "\(indent) idcardnumber: \(idcardnumber) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTruename {
               hashCode = (hashCode &* 31) &+ truename.hashValue
            }
            if hasIdcardnumber {
               hashCode = (hashCode &* 31) &+ idcardnumber.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgNameIDCardRegisterReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgNameIDCardRegisterReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgNameIDCardRegisterReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgNameIDCardRegisterReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgNameIDCardRegisterReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgNameIDCardRegisterReq()
       super.init()
    }
    var hasTruename:Bool {
         get {
              return builderResult.hasTruename
         }
    }
    var truename:String {
         get {
              return builderResult.truename
         }
         set (value) {
             builderResult.hasTruename = true
             builderResult.truename = value
         }
    }
    func setTruename(value:String)-> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      self.truename = value
      return self
    }
    internal func clearTruename() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder{
         builderResult.hasTruename = false
         builderResult.truename = ""
         return self
    }
    var hasIdcardnumber:Bool {
         get {
              return builderResult.hasIdcardnumber
         }
    }
    var idcardnumber:String {
         get {
              return builderResult.idcardnumber
         }
         set (value) {
             builderResult.hasIdcardnumber = true
             builderResult.idcardnumber = value
         }
    }
    func setIdcardnumber(value:String)-> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      self.idcardnumber = value
      return self
    }
    internal func clearIdcardnumber() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder{
         builderResult.hasIdcardnumber = false
         builderResult.idcardnumber = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      builderResult = IteasyNfclock.PkgNameIDCardRegisterReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgNameIDCardRegisterReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgNameIDCardRegisterReq {
      var returnMe:IteasyNfclock.PkgNameIDCardRegisterReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgNameIDCardRegisterReq) -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      if (other == IteasyNfclock.PkgNameIDCardRegisterReq()) {
       return self
      }
      if other.hasTruename {
           truename = other.truename
      }
      if other.hasIdcardnumber {
           idcardnumber = other.idcardnumber
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgNameIDCardRegisterReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          truename = input.readString()

        case 18 :
          idcardnumber = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgNameIDCardRegisterReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgNameIDCardRegisterReply {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgNameIDCardRegisterReply {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgNameIDCardRegisterReply {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgNameIDCardRegisterReply {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgNameIDCardRegisterReply {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgNameIDCardRegisterReply {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReply.classBuilder() as! IteasyNfclock.PkgNameIDCardRegisterReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgNameIDCardRegisterReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgNameIDCardRegisterReply) -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgNameIDCardRegisterReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgNameIDCardRegisterReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgNameIDCardRegisterReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgNameIDCardRegisterReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgNameIDCardRegisterReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgNameIDCardRegisterReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      builderResult = IteasyNfclock.PkgNameIDCardRegisterReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      return IteasyNfclock.PkgNameIDCardRegisterReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgNameIDCardRegisterReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgNameIDCardRegisterReply {
      var returnMe:IteasyNfclock.PkgNameIDCardRegisterReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgNameIDCardRegisterReply) -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      if (other == IteasyNfclock.PkgNameIDCardRegisterReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgNameIDCardRegisterReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserUserActionReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasUseruseruuid:Bool = false
    private(set) var useruseruuid:String = ""

    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var useruseractiontype:IteasyNfclock.EnUserUserActionType = IteasyNfclock.EnUserUserActionType.UserUserActionTypeInvite
    private(set) var hasUseruseractiontype:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUseruseruuid {
        output.writeString(1, value:useruseruuid)
      }
      if hasPhonenumber {
        output.writeString(2, value:phonenumber)
      }
      if hasUseruseractiontype {
        output.writeEnum(3, value:useruseractiontype.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUseruseruuid {
        serialize_size += useruseruuid.computeStringSize(1)
      }
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(2)
      }
      if (hasUseruseractiontype) {
        serialize_size += useruseractiontype.rawValue.computeEnumSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserUserActionReq {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUserActionReq {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserUserActionReq {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserUserActionReq {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserUserActionReq {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUserActionReq {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserUserActionReqBuilder {
      return IteasyNfclock.PkgUserUserActionReq.classBuilder() as! IteasyNfclock.PkgUserUserActionReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserUserActionReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserUserActionReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserUserActionReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserUserActionReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserUserActionReqBuilder {
      return IteasyNfclock.PkgUserUserActionReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserUserActionReq) -> IteasyNfclock.PkgUserUserActionReqBuilder {
      return IteasyNfclock.PkgUserUserActionReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUseruseruuid {
        output += "\(indent) useruseruuid: \(useruseruuid) \n"
      }
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if (hasUseruseractiontype) {
        output += "\(indent) useruseractiontype: \(useruseractiontype.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUseruseruuid {
               hashCode = (hashCode &* 31) &+ useruseruuid.hashValue
            }
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasUseruseractiontype {
               hashCode = (hashCode &* 31) &+ Int(useruseractiontype.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserUserActionReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserUserActionReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserUserActionReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserUserActionReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserUserActionReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserUserActionReq()
       super.init()
    }
    var hasUseruseruuid:Bool {
         get {
              return builderResult.hasUseruseruuid
         }
    }
    var useruseruuid:String {
         get {
              return builderResult.useruseruuid
         }
         set (value) {
             builderResult.hasUseruseruuid = true
             builderResult.useruseruuid = value
         }
    }
    func setUseruseruuid(value:String)-> IteasyNfclock.PkgUserUserActionReqBuilder {
      self.useruseruuid = value
      return self
    }
    internal func clearUseruseruuid() -> IteasyNfclock.PkgUserUserActionReqBuilder{
         builderResult.hasUseruseruuid = false
         builderResult.useruseruuid = ""
         return self
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgUserUserActionReqBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgUserUserActionReqBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
      var hasUseruseractiontype:Bool{
          get {
              return builderResult.hasUseruseractiontype
          }
      }
      var useruseractiontype:IteasyNfclock.EnUserUserActionType {
          get {
              return builderResult.useruseractiontype
          }
          set (value) {
              builderResult.hasUseruseractiontype = true
              builderResult.useruseractiontype = value
          }
      }
      internal func setUseruseractiontype(value:IteasyNfclock.EnUserUserActionType)-> IteasyNfclock.PkgUserUserActionReqBuilder {
        self.useruseractiontype = value
        return self
      }
      internal func clearUseruseractiontype() -> IteasyNfclock.PkgUserUserActionReqBuilder {
         builderResult.hasUseruseractiontype = false
         builderResult.useruseractiontype = .UserUserActionTypeInvite
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserUserActionReqBuilder {
      builderResult = IteasyNfclock.PkgUserUserActionReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserUserActionReqBuilder {
      return IteasyNfclock.PkgUserUserActionReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserUserActionReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserUserActionReq {
      var returnMe:IteasyNfclock.PkgUserUserActionReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserUserActionReq) -> IteasyNfclock.PkgUserUserActionReqBuilder {
      if (other == IteasyNfclock.PkgUserUserActionReq()) {
       return self
      }
      if other.hasUseruseruuid {
           useruseruuid = other.useruseruuid
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasUseruseractiontype {
           useruseractiontype = other.useruseractiontype
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserUserActionReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUserActionReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          useruseruuid = input.readString()

        case 18 :
          phonenumber = input.readString()

        case 24 :
          let valueIntuseruseractiontype = input.readEnum()
          if let enumsuseruseractiontype = IteasyNfclock.EnUserUserActionType(rawValue:valueIntuseruseractiontype){
               useruseractiontype = enumsuseruseractiontype
          } else {
               unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntuseruseractiontype))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserUserActionReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserUserActionReply {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUserActionReply {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserUserActionReply {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserUserActionReply {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserUserActionReply {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUserActionReply {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      return IteasyNfclock.PkgUserUserActionReply.classBuilder() as! IteasyNfclock.PkgUserUserActionReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserUserActionReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserUserActionReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserUserActionReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      return IteasyNfclock.PkgUserUserActionReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserUserActionReply) -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      return IteasyNfclock.PkgUserUserActionReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserUserActionReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserUserActionReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserUserActionReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserUserActionReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserUserActionReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserUserActionReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserUserActionReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserUserActionReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserUserActionReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserUserActionReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      builderResult = IteasyNfclock.PkgUserUserActionReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      return IteasyNfclock.PkgUserUserActionReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserUserActionReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserUserActionReply {
      var returnMe:IteasyNfclock.PkgUserUserActionReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserUserActionReply) -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      if (other == IteasyNfclock.PkgUserUserActionReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserUserActionReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUserActionReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockGetLockInfoReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasRecentcount:Bool = false
    private(set) var recentcount:Int32 = Int32(5)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if hasRecentcount {
        output.writeInt32(2, value:recentcount)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      if hasRecentcount {
        serialize_size += recentcount.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockGetLockInfoReq {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockInfoReq {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockGetLockInfoReq {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockGetLockInfoReq {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockGetLockInfoReq {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockInfoReq {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReq.classBuilder() as! IteasyNfclock.PkgLockGetLockInfoReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockGetLockInfoReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockGetLockInfoReq) -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasRecentcount {
        output += "\(indent) recentcount: \(recentcount) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasRecentcount {
               hashCode = (hashCode &* 31) &+ recentcount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockGetLockInfoReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockGetLockInfoReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockGetLockInfoReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockGetLockInfoReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockGetLockInfoReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockGetLockInfoReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasRecentcount:Bool {
         get {
              return builderResult.hasRecentcount
         }
    }
    var recentcount:Int32 {
         get {
              return builderResult.recentcount
         }
         set (value) {
             builderResult.hasRecentcount = true
             builderResult.recentcount = value
         }
    }
    func setRecentcount(value:Int32)-> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      self.recentcount = value
      return self
    }
    internal func clearRecentcount() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder{
         builderResult.hasRecentcount = false
         builderResult.recentcount = Int32(5)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      builderResult = IteasyNfclock.PkgLockGetLockInfoReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockGetLockInfoReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockGetLockInfoReq {
      var returnMe:IteasyNfclock.PkgLockGetLockInfoReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockGetLockInfoReq) -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      if (other == IteasyNfclock.PkgLockGetLockInfoReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasRecentcount {
           recentcount = other.recentcount
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockGetLockInfoReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockInfoReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 16 :
          recentcount = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockGetLockInfoReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var hasUserusercount:Bool = false
    private(set) var userusercount:Int32 = Int32(0)

    private(set) var hasOpenrecordcount:Bool = false
    private(set) var openrecordcount:Int32 = Int32(0)

    private(set) var lockopenrecordlist:Array<IteasyNfclock.db_lock_open_record>  = Array<IteasyNfclock.db_lock_open_record>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      if hasUserusercount {
        output.writeInt32(3, value:userusercount)
      }
      if hasOpenrecordcount {
        output.writeInt32(4, value:openrecordcount)
      }
      for oneElementlockopenrecordlist in lockopenrecordlist {
          output.writeMessage(5, value:oneElementlockopenrecordlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      if hasUserusercount {
        serialize_size += userusercount.computeInt32Size(3)
      }
      if hasOpenrecordcount {
        serialize_size += openrecordcount.computeInt32Size(4)
      }
      for oneElementlockopenrecordlist in lockopenrecordlist {
          serialize_size += oneElementlockopenrecordlist.computeMessageSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockGetLockInfoReply {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockInfoReply {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockGetLockInfoReply {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockGetLockInfoReply {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockGetLockInfoReply {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockInfoReply {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReply.classBuilder() as! IteasyNfclock.PkgLockGetLockInfoReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockGetLockInfoReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockGetLockInfoReply) -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      if hasUserusercount {
        output += "\(indent) userusercount: \(userusercount) \n"
      }
      if hasOpenrecordcount {
        output += "\(indent) openrecordcount: \(openrecordcount) \n"
      }
      var lockopenrecordlistElementIndex:Int = 0
      for oneElementlockopenrecordlist in lockopenrecordlist {
          output += "\(indent) lockopenrecordlist[\(lockopenrecordlistElementIndex)] {\n"
          oneElementlockopenrecordlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          lockopenrecordlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            if hasUserusercount {
               hashCode = (hashCode &* 31) &+ userusercount.hashValue
            }
            if hasOpenrecordcount {
               hashCode = (hashCode &* 31) &+ openrecordcount.hashValue
            }
            for oneElementlockopenrecordlist in lockopenrecordlist {
                hashCode = (hashCode &* 31) &+ oneElementlockopenrecordlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockGetLockInfoReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockGetLockInfoReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockGetLockInfoReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockGetLockInfoReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockGetLockInfoReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockGetLockInfoReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var hasUserusercount:Bool {
         get {
              return builderResult.hasUserusercount
         }
    }
    var userusercount:Int32 {
         get {
              return builderResult.userusercount
         }
         set (value) {
             builderResult.hasUserusercount = true
             builderResult.userusercount = value
         }
    }
    func setUserusercount(value:Int32)-> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      self.userusercount = value
      return self
    }
    internal func clearUserusercount() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder{
         builderResult.hasUserusercount = false
         builderResult.userusercount = Int32(0)
         return self
    }
    var hasOpenrecordcount:Bool {
         get {
              return builderResult.hasOpenrecordcount
         }
    }
    var openrecordcount:Int32 {
         get {
              return builderResult.openrecordcount
         }
         set (value) {
             builderResult.hasOpenrecordcount = true
             builderResult.openrecordcount = value
         }
    }
    func setOpenrecordcount(value:Int32)-> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      self.openrecordcount = value
      return self
    }
    internal func clearOpenrecordcount() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder{
         builderResult.hasOpenrecordcount = false
         builderResult.openrecordcount = Int32(0)
         return self
    }
    var lockopenrecordlist:Array<IteasyNfclock.db_lock_open_record> {
         get {
             return builderResult.lockopenrecordlist
         }
         set (value) {
             builderResult.lockopenrecordlist = value
         }
    }
    func setLockopenrecordlist(value:Array<IteasyNfclock.db_lock_open_record>)-> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      self.lockopenrecordlist = value
      return self
    }
    internal func clearLockopenrecordlist() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      builderResult.lockopenrecordlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      builderResult = IteasyNfclock.PkgLockGetLockInfoReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      return IteasyNfclock.PkgLockGetLockInfoReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockGetLockInfoReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockGetLockInfoReply {
      var returnMe:IteasyNfclock.PkgLockGetLockInfoReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockGetLockInfoReply) -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      if (other == IteasyNfclock.PkgLockGetLockInfoReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if other.hasUserusercount {
           userusercount = other.userusercount
      }
      if other.hasOpenrecordcount {
           openrecordcount = other.openrecordcount
      }
      if !other.lockopenrecordlist.isEmpty  {
         builderResult.lockopenrecordlist += other.lockopenrecordlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockInfoReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 24 :
          userusercount = input.readInt32()

        case 32 :
          openrecordcount = input.readInt32()

        case 42 :
          var subBuilder = IteasyNfclock.db_lock_open_record.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          lockopenrecordlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockGetLockUserReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockGetLockUserReq {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockUserReq {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockGetLockUserReq {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockGetLockUserReq {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockGetLockUserReq {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockUserReq {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      return IteasyNfclock.PkgLockGetLockUserReq.classBuilder() as! IteasyNfclock.PkgLockGetLockUserReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockGetLockUserReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockUserReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockUserReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      return IteasyNfclock.PkgLockGetLockUserReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockGetLockUserReq) -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      return IteasyNfclock.PkgLockGetLockUserReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockGetLockUserReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockGetLockUserReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockGetLockUserReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockGetLockUserReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockGetLockUserReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockGetLockUserReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockGetLockUserReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      builderResult = IteasyNfclock.PkgLockGetLockUserReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      return IteasyNfclock.PkgLockGetLockUserReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockGetLockUserReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockGetLockUserReq {
      var returnMe:IteasyNfclock.PkgLockGetLockUserReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockGetLockUserReq) -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      if (other == IteasyNfclock.PkgLockGetLockUserReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockGetLockUserReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockUserReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockGetLockUserReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var useruserlist:Array<IteasyNfclock.db_lock_user_user>  = Array<IteasyNfclock.db_lock_user_user>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      for oneElementuseruserlist in useruserlist {
          output.writeMessage(3, value:oneElementuseruserlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      for oneElementuseruserlist in useruserlist {
          serialize_size += oneElementuseruserlist.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockGetLockUserReply {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockUserReply {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockGetLockUserReply {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockGetLockUserReply {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockGetLockUserReply {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockUserReply {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      return IteasyNfclock.PkgLockGetLockUserReply.classBuilder() as! IteasyNfclock.PkgLockGetLockUserReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockGetLockUserReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockUserReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockUserReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      return IteasyNfclock.PkgLockGetLockUserReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockGetLockUserReply) -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      return IteasyNfclock.PkgLockGetLockUserReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      var useruserlistElementIndex:Int = 0
      for oneElementuseruserlist in useruserlist {
          output += "\(indent) useruserlist[\(useruserlistElementIndex)] {\n"
          oneElementuseruserlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          useruserlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            for oneElementuseruserlist in useruserlist {
                hashCode = (hashCode &* 31) &+ oneElementuseruserlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockGetLockUserReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockGetLockUserReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockGetLockUserReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockGetLockUserReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockGetLockUserReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockGetLockUserReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var useruserlist:Array<IteasyNfclock.db_lock_user_user> {
         get {
             return builderResult.useruserlist
         }
         set (value) {
             builderResult.useruserlist = value
         }
    }
    func setUseruserlist(value:Array<IteasyNfclock.db_lock_user_user>)-> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      self.useruserlist = value
      return self
    }
    internal func clearUseruserlist() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      builderResult.useruserlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      builderResult = IteasyNfclock.PkgLockGetLockUserReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      return IteasyNfclock.PkgLockGetLockUserReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockGetLockUserReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockGetLockUserReply {
      var returnMe:IteasyNfclock.PkgLockGetLockUserReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockGetLockUserReply) -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      if (other == IteasyNfclock.PkgLockGetLockUserReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if !other.useruserlist.isEmpty  {
         builderResult.useruserlist += other.useruserlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockGetLockUserReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockUserReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 26 :
          var subBuilder = IteasyNfclock.db_lock_user_user.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          useruserlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockGetLockOpenrecordReq : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      internal enum EnQueryFlag:Int32 {
        case QNone = 1
        case QDate = 2

      }

      //Enum type declaration end 



      //Enum type declaration start 

      internal enum EnPageFlag:Int32 {
        case PReturnall = 1
        case PReturnpage = 2

      }

      //Enum type declaration end 

    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var queryflag:IteasyNfclock.PkgLockGetLockOpenrecordReq.EnQueryFlag = IteasyNfclock.PkgLockGetLockOpenrecordReq.EnQueryFlag.QNone
    private(set) var hasQueryflag:Bool = false
    private(set) var hasQuerydatestart:Bool = false
    private(set) var querydatestart:String = ""

    private(set) var hasQuerydateend:Bool = false
    private(set) var querydateend:String = ""

    private(set) var pageflag:IteasyNfclock.PkgLockGetLockOpenrecordReq.EnPageFlag = IteasyNfclock.PkgLockGetLockOpenrecordReq.EnPageFlag.PReturnall
    private(set) var hasPageflag:Bool = false
    private(set) var hasIndexstart:Bool = false
    private(set) var indexstart:Int32 = Int32(0)

    private(set) var hasIndexend:Bool = false
    private(set) var indexend:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if hasQueryflag {
        output.writeEnum(2, value:queryflag.rawValue)
      }
      if hasQuerydatestart {
        output.writeString(3, value:querydatestart)
      }
      if hasQuerydateend {
        output.writeString(4, value:querydateend)
      }
      if hasPageflag {
        output.writeEnum(5, value:pageflag.rawValue)
      }
      if hasIndexstart {
        output.writeInt32(6, value:indexstart)
      }
      if hasIndexend {
        output.writeInt32(7, value:indexend)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      if (hasQueryflag) {
        serialize_size += queryflag.rawValue.computeEnumSize(2)
      }
      if hasQuerydatestart {
        serialize_size += querydatestart.computeStringSize(3)
      }
      if hasQuerydateend {
        serialize_size += querydateend.computeStringSize(4)
      }
      if (hasPageflag) {
        serialize_size += pageflag.rawValue.computeEnumSize(5)
      }
      if hasIndexstart {
        serialize_size += indexstart.computeInt32Size(6)
      }
      if hasIndexend {
        serialize_size += indexend.computeInt32Size(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockGetLockOpenrecordReq {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.classBuilder() as! IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockGetLockOpenrecordReq) -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if (hasQueryflag) {
        output += "\(indent) queryflag: \(queryflag.rawValue)\n"
      }
      if hasQuerydatestart {
        output += "\(indent) querydatestart: \(querydatestart) \n"
      }
      if hasQuerydateend {
        output += "\(indent) querydateend: \(querydateend) \n"
      }
      if (hasPageflag) {
        output += "\(indent) pageflag: \(pageflag.rawValue)\n"
      }
      if hasIndexstart {
        output += "\(indent) indexstart: \(indexstart) \n"
      }
      if hasIndexend {
        output += "\(indent) indexend: \(indexend) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasQueryflag {
               hashCode = (hashCode &* 31) &+ Int(queryflag.rawValue)
            }
            if hasQuerydatestart {
               hashCode = (hashCode &* 31) &+ querydatestart.hashValue
            }
            if hasQuerydateend {
               hashCode = (hashCode &* 31) &+ querydateend.hashValue
            }
            if hasPageflag {
               hashCode = (hashCode &* 31) &+ Int(pageflag.rawValue)
            }
            if hasIndexstart {
               hashCode = (hashCode &* 31) &+ indexstart.hashValue
            }
            if hasIndexend {
               hashCode = (hashCode &* 31) &+ indexend.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockGetLockOpenrecordReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockGetLockOpenrecordReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockGetLockOpenrecordReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockGetLockOpenrecordReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockGetLockOpenrecordReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockGetLockOpenrecordReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
      var hasQueryflag:Bool{
          get {
              return builderResult.hasQueryflag
          }
      }
      var queryflag:IteasyNfclock.PkgLockGetLockOpenrecordReq.EnQueryFlag {
          get {
              return builderResult.queryflag
          }
          set (value) {
              builderResult.hasQueryflag = true
              builderResult.queryflag = value
          }
      }
      internal func setQueryflag(value:IteasyNfclock.PkgLockGetLockOpenrecordReq.EnQueryFlag)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
        self.queryflag = value
        return self
      }
      internal func clearQueryflag() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
         builderResult.hasQueryflag = false
         builderResult.queryflag = .QNone
         return self
      }
    var hasQuerydatestart:Bool {
         get {
              return builderResult.hasQuerydatestart
         }
    }
    var querydatestart:String {
         get {
              return builderResult.querydatestart
         }
         set (value) {
             builderResult.hasQuerydatestart = true
             builderResult.querydatestart = value
         }
    }
    func setQuerydatestart(value:String)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      self.querydatestart = value
      return self
    }
    internal func clearQuerydatestart() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder{
         builderResult.hasQuerydatestart = false
         builderResult.querydatestart = ""
         return self
    }
    var hasQuerydateend:Bool {
         get {
              return builderResult.hasQuerydateend
         }
    }
    var querydateend:String {
         get {
              return builderResult.querydateend
         }
         set (value) {
             builderResult.hasQuerydateend = true
             builderResult.querydateend = value
         }
    }
    func setQuerydateend(value:String)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      self.querydateend = value
      return self
    }
    internal func clearQuerydateend() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder{
         builderResult.hasQuerydateend = false
         builderResult.querydateend = ""
         return self
    }
      var hasPageflag:Bool{
          get {
              return builderResult.hasPageflag
          }
      }
      var pageflag:IteasyNfclock.PkgLockGetLockOpenrecordReq.EnPageFlag {
          get {
              return builderResult.pageflag
          }
          set (value) {
              builderResult.hasPageflag = true
              builderResult.pageflag = value
          }
      }
      internal func setPageflag(value:IteasyNfclock.PkgLockGetLockOpenrecordReq.EnPageFlag)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
        self.pageflag = value
        return self
      }
      internal func clearPageflag() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
         builderResult.hasPageflag = false
         builderResult.pageflag = .PReturnall
         return self
      }
    var hasIndexstart:Bool {
         get {
              return builderResult.hasIndexstart
         }
    }
    var indexstart:Int32 {
         get {
              return builderResult.indexstart
         }
         set (value) {
             builderResult.hasIndexstart = true
             builderResult.indexstart = value
         }
    }
    func setIndexstart(value:Int32)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      self.indexstart = value
      return self
    }
    internal func clearIndexstart() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder{
         builderResult.hasIndexstart = false
         builderResult.indexstart = Int32(0)
         return self
    }
    var hasIndexend:Bool {
         get {
              return builderResult.hasIndexend
         }
    }
    var indexend:Int32 {
         get {
              return builderResult.indexend
         }
         set (value) {
             builderResult.hasIndexend = true
             builderResult.indexend = value
         }
    }
    func setIndexend(value:Int32)-> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      self.indexend = value
      return self
    }
    internal func clearIndexend() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder{
         builderResult.hasIndexend = false
         builderResult.indexend = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      builderResult = IteasyNfclock.PkgLockGetLockOpenrecordReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockGetLockOpenrecordReq {
      var returnMe:IteasyNfclock.PkgLockGetLockOpenrecordReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockGetLockOpenrecordReq) -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      if (other == IteasyNfclock.PkgLockGetLockOpenrecordReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasQueryflag {
           queryflag = other.queryflag
      }
      if other.hasQuerydatestart {
           querydatestart = other.querydatestart
      }
      if other.hasQuerydateend {
           querydateend = other.querydateend
      }
      if other.hasPageflag {
           pageflag = other.pageflag
      }
      if other.hasIndexstart {
           indexstart = other.indexstart
      }
      if other.hasIndexend {
           indexend = other.indexend
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockOpenrecordReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 16 :
          let valueIntqueryflag = input.readEnum()
          if let enumsqueryflag = IteasyNfclock.PkgLockGetLockOpenrecordReq.EnQueryFlag(rawValue:valueIntqueryflag){
               queryflag = enumsqueryflag
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntqueryflag))
          }

        case 26 :
          querydatestart = input.readString()

        case 34 :
          querydateend = input.readString()

        case 40 :
          let valueIntpageflag = input.readEnum()
          if let enumspageflag = IteasyNfclock.PkgLockGetLockOpenrecordReq.EnPageFlag(rawValue:valueIntpageflag){
               pageflag = enumspageflag
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntpageflag))
          }

        case 48 :
          indexstart = input.readInt32()

        case 56 :
          indexend = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockGetLockOpenrecordReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    private(set) var lockopenrecordlist:Array<IteasyNfclock.db_lock_open_record>  = Array<IteasyNfclock.db_lock_open_record>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      for oneElementlockopenrecordlist in lockopenrecordlist {
          output.writeMessage(5, value:oneElementlockopenrecordlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      for oneElementlockopenrecordlist in lockopenrecordlist {
          serialize_size += oneElementlockopenrecordlist.computeMessageSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockGetLockOpenrecordReply {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.classBuilder() as! IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockGetLockOpenrecordReply) -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      var lockopenrecordlistElementIndex:Int = 0
      for oneElementlockopenrecordlist in lockopenrecordlist {
          output += "\(indent) lockopenrecordlist[\(lockopenrecordlistElementIndex)] {\n"
          oneElementlockopenrecordlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          lockopenrecordlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            for oneElementlockopenrecordlist in lockopenrecordlist {
                hashCode = (hashCode &* 31) &+ oneElementlockopenrecordlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockGetLockOpenrecordReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockGetLockOpenrecordReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockGetLockOpenrecordReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockGetLockOpenrecordReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockGetLockOpenrecordReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockGetLockOpenrecordReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    var lockopenrecordlist:Array<IteasyNfclock.db_lock_open_record> {
         get {
             return builderResult.lockopenrecordlist
         }
         set (value) {
             builderResult.lockopenrecordlist = value
         }
    }
    func setLockopenrecordlist(value:Array<IteasyNfclock.db_lock_open_record>)-> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      self.lockopenrecordlist = value
      return self
    }
    internal func clearLockopenrecordlist() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      builderResult.lockopenrecordlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      builderResult = IteasyNfclock.PkgLockGetLockOpenrecordReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      return IteasyNfclock.PkgLockGetLockOpenrecordReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockGetLockOpenrecordReply {
      var returnMe:IteasyNfclock.PkgLockGetLockOpenrecordReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockGetLockOpenrecordReply) -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      if (other == IteasyNfclock.PkgLockGetLockOpenrecordReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      if !other.lockopenrecordlist.isEmpty  {
         builderResult.lockopenrecordlist += other.lockopenrecordlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockGetLockOpenrecordReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        case 42 :
          var subBuilder = IteasyNfclock.db_lock_open_record.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          lockopenrecordlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockSetOfflineTimeReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasOfflinetime:Bool = false
    private(set) var offlinetime:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if hasOfflinetime {
        output.writeInt32(2, value:offlinetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      if hasOfflinetime {
        serialize_size += offlinetime.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockSetOfflineTimeReq {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockSetOfflineTimeReq {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockSetOfflineTimeReq {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockSetOfflineTimeReq {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockSetOfflineTimeReq {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockSetOfflineTimeReq {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.classBuilder() as! IteasyNfclock.PkgLockSetOfflineTimeReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockSetOfflineTimeReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockSetOfflineTimeReq) -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasOfflinetime {
        output += "\(indent) offlinetime: \(offlinetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasOfflinetime {
               hashCode = (hashCode &* 31) &+ offlinetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockSetOfflineTimeReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockSetOfflineTimeReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockSetOfflineTimeReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockSetOfflineTimeReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockSetOfflineTimeReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockSetOfflineTimeReq()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasOfflinetime:Bool {
         get {
              return builderResult.hasOfflinetime
         }
    }
    var offlinetime:Int32 {
         get {
              return builderResult.offlinetime
         }
         set (value) {
             builderResult.hasOfflinetime = true
             builderResult.offlinetime = value
         }
    }
    func setOfflinetime(value:Int32)-> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      self.offlinetime = value
      return self
    }
    internal func clearOfflinetime() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder{
         builderResult.hasOfflinetime = false
         builderResult.offlinetime = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      builderResult = IteasyNfclock.PkgLockSetOfflineTimeReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockSetOfflineTimeReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockSetOfflineTimeReq {
      var returnMe:IteasyNfclock.PkgLockSetOfflineTimeReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockSetOfflineTimeReq) -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      if (other == IteasyNfclock.PkgLockSetOfflineTimeReq()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasOfflinetime {
           offlinetime = other.offlinetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockSetOfflineTimeReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 16 :
          offlinetime = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockSetOfflineTimeReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockSetOfflineTimeReply {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockSetOfflineTimeReply {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockSetOfflineTimeReply {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockSetOfflineTimeReply {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockSetOfflineTimeReply {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockSetOfflineTimeReply {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.classBuilder() as! IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockSetOfflineTimeReply) -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockSetOfflineTimeReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockSetOfflineTimeReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockSetOfflineTimeReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockSetOfflineTimeReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockSetOfflineTimeReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockSetOfflineTimeReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      builderResult = IteasyNfclock.PkgLockSetOfflineTimeReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgLockSetOfflineTimeReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockSetOfflineTimeReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockSetOfflineTimeReply {
      var returnMe:IteasyNfclock.PkgLockSetOfflineTimeReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockSetOfflineTimeReply) -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      if (other == IteasyNfclock.PkgLockSetOfflineTimeReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockSetOfflineTimeReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserModifyPasswordReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasUseroldpassword:Bool = false
    private(set) var useroldpassword:String = ""

    private(set) var hasUsernewpassword:Bool = false
    private(set) var usernewpassword:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasUseroldpassword {
        output.writeString(1, value:useroldpassword)
      }
      if hasUsernewpassword {
        output.writeString(2, value:usernewpassword)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUseroldpassword {
        serialize_size += useroldpassword.computeStringSize(1)
      }
      if hasUsernewpassword {
        serialize_size += usernewpassword.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserModifyPasswordReq {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserModifyPasswordReq {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserModifyPasswordReq {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserModifyPasswordReq {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserModifyPasswordReq {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserModifyPasswordReq {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReq.classBuilder() as! IteasyNfclock.PkgUserModifyPasswordReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserModifyPasswordReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserModifyPasswordReq) -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasUseroldpassword {
        output += "\(indent) useroldpassword: \(useroldpassword) \n"
      }
      if hasUsernewpassword {
        output += "\(indent) usernewpassword: \(usernewpassword) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUseroldpassword {
               hashCode = (hashCode &* 31) &+ useroldpassword.hashValue
            }
            if hasUsernewpassword {
               hashCode = (hashCode &* 31) &+ usernewpassword.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserModifyPasswordReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserModifyPasswordReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserModifyPasswordReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserModifyPasswordReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserModifyPasswordReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserModifyPasswordReq()
       super.init()
    }
    var hasUseroldpassword:Bool {
         get {
              return builderResult.hasUseroldpassword
         }
    }
    var useroldpassword:String {
         get {
              return builderResult.useroldpassword
         }
         set (value) {
             builderResult.hasUseroldpassword = true
             builderResult.useroldpassword = value
         }
    }
    func setUseroldpassword(value:String)-> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      self.useroldpassword = value
      return self
    }
    internal func clearUseroldpassword() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder{
         builderResult.hasUseroldpassword = false
         builderResult.useroldpassword = ""
         return self
    }
    var hasUsernewpassword:Bool {
         get {
              return builderResult.hasUsernewpassword
         }
    }
    var usernewpassword:String {
         get {
              return builderResult.usernewpassword
         }
         set (value) {
             builderResult.hasUsernewpassword = true
             builderResult.usernewpassword = value
         }
    }
    func setUsernewpassword(value:String)-> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      self.usernewpassword = value
      return self
    }
    internal func clearUsernewpassword() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder{
         builderResult.hasUsernewpassword = false
         builderResult.usernewpassword = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      builderResult = IteasyNfclock.PkgUserModifyPasswordReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserModifyPasswordReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserModifyPasswordReq {
      var returnMe:IteasyNfclock.PkgUserModifyPasswordReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserModifyPasswordReq) -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      if (other == IteasyNfclock.PkgUserModifyPasswordReq()) {
       return self
      }
      if other.hasUseroldpassword {
           useroldpassword = other.useroldpassword
      }
      if other.hasUsernewpassword {
           usernewpassword = other.usernewpassword
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserModifyPasswordReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserModifyPasswordReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          useroldpassword = input.readString()

        case 18 :
          usernewpassword = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserModifyPasswordReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserModifyPasswordReply {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserModifyPasswordReply {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserModifyPasswordReply {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserModifyPasswordReply {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserModifyPasswordReply {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserModifyPasswordReply {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReply.classBuilder() as! IteasyNfclock.PkgUserModifyPasswordReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserModifyPasswordReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserModifyPasswordReply) -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserModifyPasswordReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserModifyPasswordReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserModifyPasswordReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserModifyPasswordReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserModifyPasswordReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserModifyPasswordReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      builderResult = IteasyNfclock.PkgUserModifyPasswordReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      return IteasyNfclock.PkgUserModifyPasswordReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserModifyPasswordReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserModifyPasswordReply {
      var returnMe:IteasyNfclock.PkgUserModifyPasswordReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserModifyPasswordReply) -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      if (other == IteasyNfclock.PkgUserModifyPasswordReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserModifyPasswordReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserSetOfflineTimeReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasOfflinetime:Bool = false
    private(set) var offlinetime:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOfflinetime {
        output.writeInt32(1, value:offlinetime)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOfflinetime {
        serialize_size += offlinetime.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserSetOfflineTimeReq {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserSetOfflineTimeReq {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserSetOfflineTimeReq {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserSetOfflineTimeReq {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserSetOfflineTimeReq {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserSetOfflineTimeReq {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.classBuilder() as! IteasyNfclock.PkgUserSetOfflineTimeReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserSetOfflineTimeReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserSetOfflineTimeReq) -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOfflinetime {
        output += "\(indent) offlinetime: \(offlinetime) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOfflinetime {
               hashCode = (hashCode &* 31) &+ offlinetime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserSetOfflineTimeReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserSetOfflineTimeReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserSetOfflineTimeReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserSetOfflineTimeReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserSetOfflineTimeReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserSetOfflineTimeReq()
       super.init()
    }
    var hasOfflinetime:Bool {
         get {
              return builderResult.hasOfflinetime
         }
    }
    var offlinetime:Int32 {
         get {
              return builderResult.offlinetime
         }
         set (value) {
             builderResult.hasOfflinetime = true
             builderResult.offlinetime = value
         }
    }
    func setOfflinetime(value:Int32)-> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      self.offlinetime = value
      return self
    }
    internal func clearOfflinetime() -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder{
         builderResult.hasOfflinetime = false
         builderResult.offlinetime = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      builderResult = IteasyNfclock.PkgUserSetOfflineTimeReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserSetOfflineTimeReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserSetOfflineTimeReq {
      var returnMe:IteasyNfclock.PkgUserSetOfflineTimeReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserSetOfflineTimeReq) -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      if (other == IteasyNfclock.PkgUserSetOfflineTimeReq()) {
       return self
      }
      if other.hasOfflinetime {
           offlinetime = other.offlinetime
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserSetOfflineTimeReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          offlinetime = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserSetOfflineTimeReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserSetOfflineTimeReply {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserSetOfflineTimeReply {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserSetOfflineTimeReply {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserSetOfflineTimeReply {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserSetOfflineTimeReply {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserSetOfflineTimeReply {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.classBuilder() as! IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserSetOfflineTimeReply) -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserSetOfflineTimeReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserSetOfflineTimeReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserSetOfflineTimeReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserSetOfflineTimeReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserSetOfflineTimeReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserSetOfflineTimeReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      builderResult = IteasyNfclock.PkgUserSetOfflineTimeReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      return IteasyNfclock.PkgUserSetOfflineTimeReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserSetOfflineTimeReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserSetOfflineTimeReply {
      var returnMe:IteasyNfclock.PkgUserSetOfflineTimeReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserSetOfflineTimeReply) -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      if (other == IteasyNfclock.PkgUserSetOfflineTimeReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserSetOfflineTimeReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLogoutReq : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPhoneversion:Bool = false
    private(set) var phoneversion:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPhoneversion {
        output.writeString(1, value:phoneversion)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPhoneversion {
        serialize_size += phoneversion.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLogoutReq {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLogoutReq {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLogoutReq {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLogoutReq {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLogoutReq {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLogoutReq {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLogoutReqBuilder {
      return IteasyNfclock.PkgLogoutReq.classBuilder() as! IteasyNfclock.PkgLogoutReqBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLogoutReqBuilder {
      return classBuilder() as! IteasyNfclock.PkgLogoutReqBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLogoutReqBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLogoutReq.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLogoutReqBuilder {
      return IteasyNfclock.PkgLogoutReq.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLogoutReq) -> IteasyNfclock.PkgLogoutReqBuilder {
      return IteasyNfclock.PkgLogoutReq.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPhoneversion {
        output += "\(indent) phoneversion: \(phoneversion) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPhoneversion {
               hashCode = (hashCode &* 31) &+ phoneversion.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLogoutReq"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLogoutReq"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLogoutReq.self
    }
    //Meta information declaration end

  }

  final internal class PkgLogoutReqBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLogoutReq

    required override internal init () {
       builderResult = IteasyNfclock.PkgLogoutReq()
       super.init()
    }
    var hasPhoneversion:Bool {
         get {
              return builderResult.hasPhoneversion
         }
    }
    var phoneversion:String {
         get {
              return builderResult.phoneversion
         }
         set (value) {
             builderResult.hasPhoneversion = true
             builderResult.phoneversion = value
         }
    }
    func setPhoneversion(value:String)-> IteasyNfclock.PkgLogoutReqBuilder {
      self.phoneversion = value
      return self
    }
    internal func clearPhoneversion() -> IteasyNfclock.PkgLogoutReqBuilder{
         builderResult.hasPhoneversion = false
         builderResult.phoneversion = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLogoutReqBuilder {
      builderResult = IteasyNfclock.PkgLogoutReq()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLogoutReqBuilder {
      return IteasyNfclock.PkgLogoutReq.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLogoutReq {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLogoutReq {
      var returnMe:IteasyNfclock.PkgLogoutReq = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLogoutReq) -> IteasyNfclock.PkgLogoutReqBuilder {
      if (other == IteasyNfclock.PkgLogoutReq()) {
       return self
      }
      if other.hasPhoneversion {
           phoneversion = other.phoneversion
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLogoutReqBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLogoutReqBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          phoneversion = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLogoutReply : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasIssuccess:Bool = false
    private(set) var issuccess:Bool = true

    private(set) var hasErr:Bool = false
    private(set) var err:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasIssuccess {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasIssuccess {
        output.writeBool(1, value:issuccess)
      }
      if hasErr {
        output.writeString(2, value:err)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIssuccess {
        serialize_size += issuccess.computeBoolSize(1)
      }
      if hasErr {
        serialize_size += err.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLogoutReply {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLogoutReply {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLogoutReply {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLogoutReply {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLogoutReply {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLogoutReply {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLogoutReplyBuilder {
      return IteasyNfclock.PkgLogoutReply.classBuilder() as! IteasyNfclock.PkgLogoutReplyBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLogoutReplyBuilder {
      return classBuilder() as! IteasyNfclock.PkgLogoutReplyBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLogoutReplyBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLogoutReply.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLogoutReplyBuilder {
      return IteasyNfclock.PkgLogoutReply.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLogoutReply) -> IteasyNfclock.PkgLogoutReplyBuilder {
      return IteasyNfclock.PkgLogoutReply.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasIssuccess {
        output += "\(indent) issuccess: \(issuccess) \n"
      }
      if hasErr {
        output += "\(indent) err: \(err) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIssuccess {
               hashCode = (hashCode &* 31) &+ issuccess.hashValue
            }
            if hasErr {
               hashCode = (hashCode &* 31) &+ err.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLogoutReply"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLogoutReply"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLogoutReply.self
    }
    //Meta information declaration end

  }

  final internal class PkgLogoutReplyBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLogoutReply

    required override internal init () {
       builderResult = IteasyNfclock.PkgLogoutReply()
       super.init()
    }
    var hasIssuccess:Bool {
         get {
              return builderResult.hasIssuccess
         }
    }
    var issuccess:Bool {
         get {
              return builderResult.issuccess
         }
         set (value) {
             builderResult.hasIssuccess = true
             builderResult.issuccess = value
         }
    }
    func setIssuccess(value:Bool)-> IteasyNfclock.PkgLogoutReplyBuilder {
      self.issuccess = value
      return self
    }
    internal func clearIssuccess() -> IteasyNfclock.PkgLogoutReplyBuilder{
         builderResult.hasIssuccess = false
         builderResult.issuccess = true
         return self
    }
    var hasErr:Bool {
         get {
              return builderResult.hasErr
         }
    }
    var err:String {
         get {
              return builderResult.err
         }
         set (value) {
             builderResult.hasErr = true
             builderResult.err = value
         }
    }
    func setErr(value:String)-> IteasyNfclock.PkgLogoutReplyBuilder {
      self.err = value
      return self
    }
    internal func clearErr() -> IteasyNfclock.PkgLogoutReplyBuilder{
         builderResult.hasErr = false
         builderResult.err = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLogoutReplyBuilder {
      builderResult = IteasyNfclock.PkgLogoutReply()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLogoutReplyBuilder {
      return IteasyNfclock.PkgLogoutReply.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLogoutReply {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLogoutReply {
      var returnMe:IteasyNfclock.PkgLogoutReply = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLogoutReply) -> IteasyNfclock.PkgLogoutReplyBuilder {
      if (other == IteasyNfclock.PkgLogoutReply()) {
       return self
      }
      if other.hasIssuccess {
           issuccess = other.issuccess
      }
      if other.hasErr {
           err = other.err
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLogoutReplyBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLogoutReplyBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          issuccess = input.readBool()

        case 18 :
          err = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockPassword : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasTimestamp:Bool = false
    private(set) var timestamp:String = ""

    private(set) var hasLockpassword:Bool = false
    private(set) var lockpassword:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasTimestamp {
        output.writeString(1, value:timestamp)
      }
      if hasLockpassword {
        output.writeString(2, value:lockpassword)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestamp {
        serialize_size += timestamp.computeStringSize(1)
      }
      if hasLockpassword {
        serialize_size += lockpassword.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockPassword {
      return IteasyNfclock.PkgLockPassword.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockPassword {
      return IteasyNfclock.PkgLockPassword.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockPassword {
      return IteasyNfclock.PkgLockPassword.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockPassword {
      return IteasyNfclock.PkgLockPassword.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockPassword {
      return IteasyNfclock.PkgLockPassword.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockPassword {
      return IteasyNfclock.PkgLockPassword.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockPasswordBuilder {
      return IteasyNfclock.PkgLockPassword.classBuilder() as! IteasyNfclock.PkgLockPasswordBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockPasswordBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockPasswordBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockPasswordBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockPassword.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockPasswordBuilder {
      return IteasyNfclock.PkgLockPassword.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockPassword) -> IteasyNfclock.PkgLockPasswordBuilder {
      return IteasyNfclock.PkgLockPassword.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      if hasLockpassword {
        output += "\(indent) lockpassword: \(lockpassword) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            if hasLockpassword {
               hashCode = (hashCode &* 31) &+ lockpassword.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockPassword"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockPassword"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockPassword.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockPasswordBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockPassword

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockPassword()
       super.init()
    }
    var hasTimestamp:Bool {
         get {
              return builderResult.hasTimestamp
         }
    }
    var timestamp:String {
         get {
              return builderResult.timestamp
         }
         set (value) {
             builderResult.hasTimestamp = true
             builderResult.timestamp = value
         }
    }
    func setTimestamp(value:String)-> IteasyNfclock.PkgLockPasswordBuilder {
      self.timestamp = value
      return self
    }
    internal func clearTimestamp() -> IteasyNfclock.PkgLockPasswordBuilder{
         builderResult.hasTimestamp = false
         builderResult.timestamp = ""
         return self
    }
    var hasLockpassword:Bool {
         get {
              return builderResult.hasLockpassword
         }
    }
    var lockpassword:String {
         get {
              return builderResult.lockpassword
         }
         set (value) {
             builderResult.hasLockpassword = true
             builderResult.lockpassword = value
         }
    }
    func setLockpassword(value:String)-> IteasyNfclock.PkgLockPasswordBuilder {
      self.lockpassword = value
      return self
    }
    internal func clearLockpassword() -> IteasyNfclock.PkgLockPasswordBuilder{
         builderResult.hasLockpassword = false
         builderResult.lockpassword = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockPasswordBuilder {
      builderResult = IteasyNfclock.PkgLockPassword()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockPasswordBuilder {
      return IteasyNfclock.PkgLockPassword.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockPassword {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockPassword {
      var returnMe:IteasyNfclock.PkgLockPassword = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockPassword) -> IteasyNfclock.PkgLockPasswordBuilder {
      if (other == IteasyNfclock.PkgLockPassword()) {
       return self
      }
      if other.hasTimestamp {
           timestamp = other.timestamp
      }
      if other.hasLockpassword {
           lockpassword = other.lockpassword
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockPasswordBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockPasswordBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          timestamp = input.readString()

        case 18 :
          lockpassword = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgSrvPushUserInfo : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPhonenumber:Bool = false
    private(set) var phonenumber:String = ""

    private(set) var hasTruename:Bool = false
    private(set) var truename:String = ""

    private(set) var hasIdcardnumber:Bool = false
    private(set) var idcardnumber:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPhonenumber {
        output.writeString(1, value:phonenumber)
      }
      if hasTruename {
        output.writeString(6, value:truename)
      }
      if hasIdcardnumber {
        output.writeString(7, value:idcardnumber)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPhonenumber {
        serialize_size += phonenumber.computeStringSize(1)
      }
      if hasTruename {
        serialize_size += truename.computeStringSize(6)
      }
      if hasIdcardnumber {
        serialize_size += idcardnumber.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgSrvPushUserInfo {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushUserInfo {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgSrvPushUserInfo {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgSrvPushUserInfo {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgSrvPushUserInfo {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushUserInfo {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      return IteasyNfclock.PkgSrvPushUserInfo.classBuilder() as! IteasyNfclock.PkgSrvPushUserInfoBuilder
    }
    internal func builder() -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      return classBuilder() as! IteasyNfclock.PkgSrvPushUserInfoBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushUserInfoBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushUserInfo.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      return IteasyNfclock.PkgSrvPushUserInfo.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgSrvPushUserInfo) -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      return IteasyNfclock.PkgSrvPushUserInfo.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPhonenumber {
        output += "\(indent) phonenumber: \(phonenumber) \n"
      }
      if hasTruename {
        output += "\(indent) truename: \(truename) \n"
      }
      if hasIdcardnumber {
        output += "\(indent) idcardnumber: \(idcardnumber) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPhonenumber {
               hashCode = (hashCode &* 31) &+ phonenumber.hashValue
            }
            if hasTruename {
               hashCode = (hashCode &* 31) &+ truename.hashValue
            }
            if hasIdcardnumber {
               hashCode = (hashCode &* 31) &+ idcardnumber.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgSrvPushUserInfo"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgSrvPushUserInfo"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgSrvPushUserInfo.self
    }
    //Meta information declaration end

  }

  final internal class PkgSrvPushUserInfoBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgSrvPushUserInfo

    required override internal init () {
       builderResult = IteasyNfclock.PkgSrvPushUserInfo()
       super.init()
    }
    var hasPhonenumber:Bool {
         get {
              return builderResult.hasPhonenumber
         }
    }
    var phonenumber:String {
         get {
              return builderResult.phonenumber
         }
         set (value) {
             builderResult.hasPhonenumber = true
             builderResult.phonenumber = value
         }
    }
    func setPhonenumber(value:String)-> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      self.phonenumber = value
      return self
    }
    internal func clearPhonenumber() -> IteasyNfclock.PkgSrvPushUserInfoBuilder{
         builderResult.hasPhonenumber = false
         builderResult.phonenumber = ""
         return self
    }
    var hasTruename:Bool {
         get {
              return builderResult.hasTruename
         }
    }
    var truename:String {
         get {
              return builderResult.truename
         }
         set (value) {
             builderResult.hasTruename = true
             builderResult.truename = value
         }
    }
    func setTruename(value:String)-> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      self.truename = value
      return self
    }
    internal func clearTruename() -> IteasyNfclock.PkgSrvPushUserInfoBuilder{
         builderResult.hasTruename = false
         builderResult.truename = ""
         return self
    }
    var hasIdcardnumber:Bool {
         get {
              return builderResult.hasIdcardnumber
         }
    }
    var idcardnumber:String {
         get {
              return builderResult.idcardnumber
         }
         set (value) {
             builderResult.hasIdcardnumber = true
             builderResult.idcardnumber = value
         }
    }
    func setIdcardnumber(value:String)-> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      self.idcardnumber = value
      return self
    }
    internal func clearIdcardnumber() -> IteasyNfclock.PkgSrvPushUserInfoBuilder{
         builderResult.hasIdcardnumber = false
         builderResult.idcardnumber = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      builderResult = IteasyNfclock.PkgSrvPushUserInfo()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      return IteasyNfclock.PkgSrvPushUserInfo.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgSrvPushUserInfo {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgSrvPushUserInfo {
      var returnMe:IteasyNfclock.PkgSrvPushUserInfo = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgSrvPushUserInfo) -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      if (other == IteasyNfclock.PkgSrvPushUserInfo()) {
       return self
      }
      if other.hasPhonenumber {
           phonenumber = other.phonenumber
      }
      if other.hasTruename {
           truename = other.truename
      }
      if other.hasIdcardnumber {
           idcardnumber = other.idcardnumber
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgSrvPushUserInfoBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushUserInfoBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          phonenumber = input.readString()

        case 50 :
          truename = input.readString()

        case 58 :
          idcardnumber = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgLockPasswordList : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasLockuuid:Bool = false
    private(set) var lockuuid:String = ""

    private(set) var hasLockdeviceid:Bool = false
    private(set) var lockdeviceid:String = ""

    private(set) var lockpasswordlist:Array<IteasyNfclock.PkgLockPassword>  = Array<IteasyNfclock.PkgLockPassword>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasLockuuid {
        output.writeString(1, value:lockuuid)
      }
      if hasLockdeviceid {
        output.writeString(2, value:lockdeviceid)
      }
      for oneElementlockpasswordlist in lockpasswordlist {
          output.writeMessage(3, value:oneElementlockpasswordlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLockuuid {
        serialize_size += lockuuid.computeStringSize(1)
      }
      if hasLockdeviceid {
        serialize_size += lockdeviceid.computeStringSize(2)
      }
      for oneElementlockpasswordlist in lockpasswordlist {
          serialize_size += oneElementlockpasswordlist.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgLockPasswordList {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockPasswordList {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgLockPasswordList {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgLockPasswordList {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgLockPasswordList {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockPasswordList {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgLockPasswordListBuilder {
      return IteasyNfclock.PkgLockPasswordList.classBuilder() as! IteasyNfclock.PkgLockPasswordListBuilder
    }
    internal func builder() -> IteasyNfclock.PkgLockPasswordListBuilder {
      return classBuilder() as! IteasyNfclock.PkgLockPasswordListBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockPasswordListBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgLockPasswordList.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgLockPasswordListBuilder {
      return IteasyNfclock.PkgLockPasswordList.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgLockPasswordList) -> IteasyNfclock.PkgLockPasswordListBuilder {
      return IteasyNfclock.PkgLockPasswordList.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasLockuuid {
        output += "\(indent) lockuuid: \(lockuuid) \n"
      }
      if hasLockdeviceid {
        output += "\(indent) lockdeviceid: \(lockdeviceid) \n"
      }
      var lockpasswordlistElementIndex:Int = 0
      for oneElementlockpasswordlist in lockpasswordlist {
          output += "\(indent) lockpasswordlist[\(lockpasswordlistElementIndex)] {\n"
          oneElementlockpasswordlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          lockpasswordlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLockuuid {
               hashCode = (hashCode &* 31) &+ lockuuid.hashValue
            }
            if hasLockdeviceid {
               hashCode = (hashCode &* 31) &+ lockdeviceid.hashValue
            }
            for oneElementlockpasswordlist in lockpasswordlist {
                hashCode = (hashCode &* 31) &+ oneElementlockpasswordlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgLockPasswordList"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgLockPasswordList"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgLockPasswordList.self
    }
    //Meta information declaration end

  }

  final internal class PkgLockPasswordListBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgLockPasswordList

    required override internal init () {
       builderResult = IteasyNfclock.PkgLockPasswordList()
       super.init()
    }
    var hasLockuuid:Bool {
         get {
              return builderResult.hasLockuuid
         }
    }
    var lockuuid:String {
         get {
              return builderResult.lockuuid
         }
         set (value) {
             builderResult.hasLockuuid = true
             builderResult.lockuuid = value
         }
    }
    func setLockuuid(value:String)-> IteasyNfclock.PkgLockPasswordListBuilder {
      self.lockuuid = value
      return self
    }
    internal func clearLockuuid() -> IteasyNfclock.PkgLockPasswordListBuilder{
         builderResult.hasLockuuid = false
         builderResult.lockuuid = ""
         return self
    }
    var hasLockdeviceid:Bool {
         get {
              return builderResult.hasLockdeviceid
         }
    }
    var lockdeviceid:String {
         get {
              return builderResult.lockdeviceid
         }
         set (value) {
             builderResult.hasLockdeviceid = true
             builderResult.lockdeviceid = value
         }
    }
    func setLockdeviceid(value:String)-> IteasyNfclock.PkgLockPasswordListBuilder {
      self.lockdeviceid = value
      return self
    }
    internal func clearLockdeviceid() -> IteasyNfclock.PkgLockPasswordListBuilder{
         builderResult.hasLockdeviceid = false
         builderResult.lockdeviceid = ""
         return self
    }
    var lockpasswordlist:Array<IteasyNfclock.PkgLockPassword> {
         get {
             return builderResult.lockpasswordlist
         }
         set (value) {
             builderResult.lockpasswordlist = value
         }
    }
    func setLockpasswordlist(value:Array<IteasyNfclock.PkgLockPassword>)-> IteasyNfclock.PkgLockPasswordListBuilder {
      self.lockpasswordlist = value
      return self
    }
    internal func clearLockpasswordlist() -> IteasyNfclock.PkgLockPasswordListBuilder {
      builderResult.lockpasswordlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgLockPasswordListBuilder {
      builderResult = IteasyNfclock.PkgLockPasswordList()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgLockPasswordListBuilder {
      return IteasyNfclock.PkgLockPasswordList.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgLockPasswordList {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgLockPasswordList {
      var returnMe:IteasyNfclock.PkgLockPasswordList = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgLockPasswordList) -> IteasyNfclock.PkgLockPasswordListBuilder {
      if (other == IteasyNfclock.PkgLockPasswordList()) {
       return self
      }
      if other.hasLockuuid {
           lockuuid = other.lockuuid
      }
      if other.hasLockdeviceid {
           lockdeviceid = other.lockdeviceid
      }
      if !other.lockpasswordlist.isEmpty  {
         builderResult.lockpasswordlist += other.lockpasswordlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgLockPasswordListBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgLockPasswordListBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          lockuuid = input.readString()

        case 18 :
          lockdeviceid = input.readString()

        case 26 :
          var subBuilder = IteasyNfclock.PkgLockPassword.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          lockpasswordlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgSrvPushLockListPasswordList : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var locklistpasswordlist:Array<IteasyNfclock.PkgLockPasswordList>  = Array<IteasyNfclock.PkgLockPasswordList>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      for oneElementlocklistpasswordlist in locklistpasswordlist {
          output.writeMessage(1, value:oneElementlocklistpasswordlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementlocklistpasswordlist in locklistpasswordlist {
          serialize_size += oneElementlocklistpasswordlist.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgSrvPushLockListPasswordList {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushLockListPasswordList {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgSrvPushLockListPasswordList {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgSrvPushLockListPasswordList {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgSrvPushLockListPasswordList {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushLockListPasswordList {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.classBuilder() as! IteasyNfclock.PkgSrvPushLockListPasswordListBuilder
    }
    internal func builder() -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      return classBuilder() as! IteasyNfclock.PkgSrvPushLockListPasswordListBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushLockListPasswordListBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgSrvPushLockListPasswordList) -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var locklistpasswordlistElementIndex:Int = 0
      for oneElementlocklistpasswordlist in locklistpasswordlist {
          output += "\(indent) locklistpasswordlist[\(locklistpasswordlistElementIndex)] {\n"
          oneElementlocklistpasswordlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          locklistpasswordlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementlocklistpasswordlist in locklistpasswordlist {
                hashCode = (hashCode &* 31) &+ oneElementlocklistpasswordlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgSrvPushLockListPasswordList"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgSrvPushLockListPasswordList"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgSrvPushLockListPasswordList.self
    }
    //Meta information declaration end

  }

  final internal class PkgSrvPushLockListPasswordListBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgSrvPushLockListPasswordList

    required override internal init () {
       builderResult = IteasyNfclock.PkgSrvPushLockListPasswordList()
       super.init()
    }
    var locklistpasswordlist:Array<IteasyNfclock.PkgLockPasswordList> {
         get {
             return builderResult.locklistpasswordlist
         }
         set (value) {
             builderResult.locklistpasswordlist = value
         }
    }
    func setLocklistpasswordlist(value:Array<IteasyNfclock.PkgLockPasswordList>)-> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      self.locklistpasswordlist = value
      return self
    }
    internal func clearLocklistpasswordlist() -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      builderResult.locklistpasswordlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      builderResult = IteasyNfclock.PkgSrvPushLockListPasswordList()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      return IteasyNfclock.PkgSrvPushLockListPasswordList.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgSrvPushLockListPasswordList {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgSrvPushLockListPasswordList {
      var returnMe:IteasyNfclock.PkgSrvPushLockListPasswordList = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgSrvPushLockListPasswordList) -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      if (other == IteasyNfclock.PkgSrvPushLockListPasswordList()) {
       return self
      }
      if !other.locklistpasswordlist.isEmpty  {
         builderResult.locklistpasswordlist += other.locklistpasswordlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushLockListPasswordListBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder = IteasyNfclock.PkgLockPasswordList.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          locklistpasswordlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgSrvPushLocks : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var ownerlocklist:Array<IteasyNfclock.db_lock>  = Array<IteasyNfclock.db_lock>()
    private(set) var otherlocklist:Array<IteasyNfclock.db_lock>  = Array<IteasyNfclock.db_lock>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      for oneElementownerlocklist in ownerlocklist {
          output.writeMessage(1, value:oneElementownerlocklist)
      }
      for oneElementotherlocklist in otherlocklist {
          output.writeMessage(2, value:oneElementotherlocklist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementownerlocklist in ownerlocklist {
          serialize_size += oneElementownerlocklist.computeMessageSize(1)
      }
      for oneElementotherlocklist in otherlocklist {
          serialize_size += oneElementotherlocklist.computeMessageSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgSrvPushLocks {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushLocks {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgSrvPushLocks {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgSrvPushLocks {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgSrvPushLocks {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushLocks {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      return IteasyNfclock.PkgSrvPushLocks.classBuilder() as! IteasyNfclock.PkgSrvPushLocksBuilder
    }
    internal func builder() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      return classBuilder() as! IteasyNfclock.PkgSrvPushLocksBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushLocksBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushLocks.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      return IteasyNfclock.PkgSrvPushLocks.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgSrvPushLocks) -> IteasyNfclock.PkgSrvPushLocksBuilder {
      return IteasyNfclock.PkgSrvPushLocks.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var ownerlocklistElementIndex:Int = 0
      for oneElementownerlocklist in ownerlocklist {
          output += "\(indent) ownerlocklist[\(ownerlocklistElementIndex)] {\n"
          oneElementownerlocklist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          ownerlocklistElementIndex++
      }
      var otherlocklistElementIndex:Int = 0
      for oneElementotherlocklist in otherlocklist {
          output += "\(indent) otherlocklist[\(otherlocklistElementIndex)] {\n"
          oneElementotherlocklist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          otherlocklistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementownerlocklist in ownerlocklist {
                hashCode = (hashCode &* 31) &+ oneElementownerlocklist.hashValue
            }
            for oneElementotherlocklist in otherlocklist {
                hashCode = (hashCode &* 31) &+ oneElementotherlocklist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgSrvPushLocks"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgSrvPushLocks"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgSrvPushLocks.self
    }
    //Meta information declaration end

  }

  final internal class PkgSrvPushLocksBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgSrvPushLocks

    required override internal init () {
       builderResult = IteasyNfclock.PkgSrvPushLocks()
       super.init()
    }
    var ownerlocklist:Array<IteasyNfclock.db_lock> {
         get {
             return builderResult.ownerlocklist
         }
         set (value) {
             builderResult.ownerlocklist = value
         }
    }
    func setOwnerlocklist(value:Array<IteasyNfclock.db_lock>)-> IteasyNfclock.PkgSrvPushLocksBuilder {
      self.ownerlocklist = value
      return self
    }
    internal func clearOwnerlocklist() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      builderResult.ownerlocklist.removeAll(keepCapacity: false)
      return self
    }
    var otherlocklist:Array<IteasyNfclock.db_lock> {
         get {
             return builderResult.otherlocklist
         }
         set (value) {
             builderResult.otherlocklist = value
         }
    }
    func setOtherlocklist(value:Array<IteasyNfclock.db_lock>)-> IteasyNfclock.PkgSrvPushLocksBuilder {
      self.otherlocklist = value
      return self
    }
    internal func clearOtherlocklist() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      builderResult.otherlocklist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      builderResult = IteasyNfclock.PkgSrvPushLocks()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgSrvPushLocksBuilder {
      return IteasyNfclock.PkgSrvPushLocks.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgSrvPushLocks {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgSrvPushLocks {
      var returnMe:IteasyNfclock.PkgSrvPushLocks = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgSrvPushLocks) -> IteasyNfclock.PkgSrvPushLocksBuilder {
      if (other == IteasyNfclock.PkgSrvPushLocks()) {
       return self
      }
      if !other.ownerlocklist.isEmpty  {
         builderResult.ownerlocklist += other.ownerlocklist
      }
      if !other.otherlocklist.isEmpty  {
         builderResult.otherlocklist += other.otherlocklist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgSrvPushLocksBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushLocksBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder = IteasyNfclock.db_lock.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          ownerlocklist += [subBuilder.buildPartial()]

        case 18 :
          var subBuilder = IteasyNfclock.db_lock.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          otherlocklist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgUserUsers : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasDbLockUserUser:Bool = false
    private(set) var dbLockUserUser:IteasyNfclock.db_lock_user_user!
    private(set) var userusertype:IteasyNfclock.EnUserUserType = IteasyNfclock.EnUserUserType.UserUserTypeEmpty
    private(set) var hasUserusertype:Bool = false
    private(set) var hasInfotxt:Bool = false
    private(set) var infotxt:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasDbLockUserUser {
        output.writeMessage(1, value:dbLockUserUser)
      }
      if hasUserusertype {
        output.writeEnum(2, value:userusertype.rawValue)
      }
      if hasInfotxt {
        output.writeString(3, value:infotxt)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDbLockUserUser {
          if let varSizedbLockUserUser = dbLockUserUser?.computeMessageSize(1) {
              serialize_size += varSizedbLockUserUser
          }
      }
      if (hasUserusertype) {
        serialize_size += userusertype.rawValue.computeEnumSize(2)
      }
      if hasInfotxt {
        serialize_size += infotxt.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgUserUsers {
      return IteasyNfclock.PkgUserUsers.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUsers {
      return IteasyNfclock.PkgUserUsers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgUserUsers {
      return IteasyNfclock.PkgUserUsers.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgUserUsers {
      return IteasyNfclock.PkgUserUsers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgUserUsers {
      return IteasyNfclock.PkgUserUsers.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUsers {
      return IteasyNfclock.PkgUserUsers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgUserUsersBuilder {
      return IteasyNfclock.PkgUserUsers.classBuilder() as! IteasyNfclock.PkgUserUsersBuilder
    }
    internal func builder() -> IteasyNfclock.PkgUserUsersBuilder {
      return classBuilder() as! IteasyNfclock.PkgUserUsersBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserUsersBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgUserUsers.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgUserUsersBuilder {
      return IteasyNfclock.PkgUserUsers.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgUserUsers) -> IteasyNfclock.PkgUserUsersBuilder {
      return IteasyNfclock.PkgUserUsers.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasDbLockUserUser {
        output += "\(indent) dbLockUserUser {\n"
        dbLockUserUser?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasUserusertype) {
        output += "\(indent) userusertype: \(userusertype.rawValue)\n"
      }
      if hasInfotxt {
        output += "\(indent) infotxt: \(infotxt) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDbLockUserUser {
                if let hashValuedbLockUserUser = dbLockUserUser?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedbLockUserUser
                }
            }
            if hasUserusertype {
               hashCode = (hashCode &* 31) &+ Int(userusertype.rawValue)
            }
            if hasInfotxt {
               hashCode = (hashCode &* 31) &+ infotxt.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgUserUsers"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgUserUsers"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgUserUsers.self
    }
    //Meta information declaration end

  }

  final internal class PkgUserUsersBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgUserUsers

    required override internal init () {
       builderResult = IteasyNfclock.PkgUserUsers()
       super.init()
    }
    var hasDbLockUserUser:Bool {
         get {
             return builderResult.hasDbLockUserUser
         }
    }
    var dbLockUserUser:IteasyNfclock.db_lock_user_user! {
         get {
             return builderResult.dbLockUserUser
         }
         set (value) {
             builderResult.hasDbLockUserUser = true
             builderResult.dbLockUserUser = value
         }
    }
    func setDbLockUserUser(value:IteasyNfclock.db_lock_user_user!)-> IteasyNfclock.PkgUserUsersBuilder {
      self.dbLockUserUser = value
      return self
    }
    internal func mergeDbLockUserUser(value:IteasyNfclock.db_lock_user_user) -> IteasyNfclock.PkgUserUsersBuilder {
      if (builderResult.hasDbLockUserUser) {
        builderResult.dbLockUserUser = IteasyNfclock.db_lock_user_user.builderWithPrototype(builderResult.dbLockUserUser).mergeFrom(value).buildPartial()
      } else {
        builderResult.dbLockUserUser = value
      }
      builderResult.hasDbLockUserUser = true
      return self
    }
    internal func clearDbLockUserUser() -> IteasyNfclock.PkgUserUsersBuilder {
      builderResult.hasDbLockUserUser = false
      builderResult.dbLockUserUser = nil
      return self
    }
      var hasUserusertype:Bool{
          get {
              return builderResult.hasUserusertype
          }
      }
      var userusertype:IteasyNfclock.EnUserUserType {
          get {
              return builderResult.userusertype
          }
          set (value) {
              builderResult.hasUserusertype = true
              builderResult.userusertype = value
          }
      }
      internal func setUserusertype(value:IteasyNfclock.EnUserUserType)-> IteasyNfclock.PkgUserUsersBuilder {
        self.userusertype = value
        return self
      }
      internal func clearUserusertype() -> IteasyNfclock.PkgUserUsersBuilder {
         builderResult.hasUserusertype = false
         builderResult.userusertype = .UserUserTypeEmpty
         return self
      }
    var hasInfotxt:Bool {
         get {
              return builderResult.hasInfotxt
         }
    }
    var infotxt:String {
         get {
              return builderResult.infotxt
         }
         set (value) {
             builderResult.hasInfotxt = true
             builderResult.infotxt = value
         }
    }
    func setInfotxt(value:String)-> IteasyNfclock.PkgUserUsersBuilder {
      self.infotxt = value
      return self
    }
    internal func clearInfotxt() -> IteasyNfclock.PkgUserUsersBuilder{
         builderResult.hasInfotxt = false
         builderResult.infotxt = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgUserUsersBuilder {
      builderResult = IteasyNfclock.PkgUserUsers()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgUserUsersBuilder {
      return IteasyNfclock.PkgUserUsers.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgUserUsers {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgUserUsers {
      var returnMe:IteasyNfclock.PkgUserUsers = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgUserUsers) -> IteasyNfclock.PkgUserUsersBuilder {
      if (other == IteasyNfclock.PkgUserUsers()) {
       return self
      }
      if (other.hasDbLockUserUser) {
          mergeDbLockUserUser(other.dbLockUserUser)
      }
      if other.hasUserusertype {
           userusertype = other.userusertype
      }
      if other.hasInfotxt {
           infotxt = other.infotxt
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgUserUsersBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgUserUsersBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:IteasyNfclock.db_lock_user_userBuilder = IteasyNfclock.db_lock_user_user.builder()
          if hasDbLockUserUser {
            subBuilder.mergeFrom(dbLockUserUser)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          dbLockUserUser = subBuilder.buildPartial()

        case 16 :
          let valueIntuserusertype = input.readEnum()
          if let enumsuserusertype = IteasyNfclock.EnUserUserType(rawValue:valueIntuserusertype){
               userusertype = enumsuserusertype
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntuserusertype))
          }

        case 26 :
          infotxt = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class PkgSrvPushUserUsers : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var userlist:Array<IteasyNfclock.PkgUserUsers>  = Array<IteasyNfclock.PkgUserUsers>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      for oneElementuserlist in userlist {
          output.writeMessage(1, value:oneElementuserlist)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementuserlist in userlist {
          serialize_size += oneElementuserlist.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> IteasyNfclock.PkgSrvPushUserUsers {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFromData(data, extensionRegistry:IteasyNfclock.ModelCommRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushUserUsers {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> IteasyNfclock.PkgSrvPushUserUsers {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IteasyNfclock.PkgSrvPushUserUsers {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> IteasyNfclock.PkgSrvPushUserUsers {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushUserUsers {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      return IteasyNfclock.PkgSrvPushUserUsers.classBuilder() as! IteasyNfclock.PkgSrvPushUserUsersBuilder
    }
    internal func builder() -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      return classBuilder() as! IteasyNfclock.PkgSrvPushUserUsersBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushUserUsersBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return IteasyNfclock.PkgSrvPushUserUsers.builder()
    }
    internal func toBuilder() -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      return IteasyNfclock.PkgSrvPushUserUsers.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:IteasyNfclock.PkgSrvPushUserUsers) -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      return IteasyNfclock.PkgSrvPushUserUsers.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var userlistElementIndex:Int = 0
      for oneElementuserlist in userlist {
          output += "\(indent) userlist[\(userlistElementIndex)] {\n"
          oneElementuserlist.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          userlistElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementuserlist in userlist {
                hashCode = (hashCode &* 31) &+ oneElementuserlist.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "IteasyNfclock.PkgSrvPushUserUsers"
    }
    override internal func className() -> String {
        return "IteasyNfclock.PkgSrvPushUserUsers"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return IteasyNfclock.PkgSrvPushUserUsers.self
    }
    //Meta information declaration end

  }

  final internal class PkgSrvPushUserUsersBuilder : GeneratedMessageBuilder {
    private var builderResult:IteasyNfclock.PkgSrvPushUserUsers

    required override internal init () {
       builderResult = IteasyNfclock.PkgSrvPushUserUsers()
       super.init()
    }
    var userlist:Array<IteasyNfclock.PkgUserUsers> {
         get {
             return builderResult.userlist
         }
         set (value) {
             builderResult.userlist = value
         }
    }
    func setUserlist(value:Array<IteasyNfclock.PkgUserUsers>)-> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      self.userlist = value
      return self
    }
    internal func clearUserlist() -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      builderResult.userlist.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      builderResult = IteasyNfclock.PkgSrvPushUserUsers()
      return self
    }
    internal override func clone() -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      return IteasyNfclock.PkgSrvPushUserUsers.builderWithPrototype(builderResult)
    }
    internal override func build() -> IteasyNfclock.PkgSrvPushUserUsers {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> IteasyNfclock.PkgSrvPushUserUsers {
      var returnMe:IteasyNfclock.PkgSrvPushUserUsers = builderResult
      return returnMe
    }
    internal func mergeFrom(other:IteasyNfclock.PkgSrvPushUserUsers) -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      if (other == IteasyNfclock.PkgSrvPushUserUsers()) {
       return self
      }
      if !other.userlist.isEmpty  {
         builderResult.userlist += other.userlist
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IteasyNfclock.PkgSrvPushUserUsersBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IteasyNfclock.PkgSrvPushUserUsersBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder = IteasyNfclock.PkgUserUsers.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          userlist += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
